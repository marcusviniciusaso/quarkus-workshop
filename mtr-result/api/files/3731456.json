{"id":"3731456","content":"package ch.qos.logback.core.joran.event;\n\nimport ch.qos.logback.core.Context;\nimport ch.qos.logback.core.joran.spi.ElementPath;\nimport ch.qos.logback.core.joran.spi.JoranException;\nimport ch.qos.logback.core.spi.ContextAware;\nimport ch.qos.logback.core.spi.ContextAwareImpl;\nimport ch.qos.logback.core.status.Status;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.xml.parsers.SAXParser;\nimport javax.xml.parsers.SAXParserFactory;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.Locator;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.SAXParseException;\nimport org.xml.sax.helpers.DefaultHandler;\n\npublic class SaxEventRecorder extends DefaultHandler implements ContextAware {\n   final ContextAwareImpl cai;\n   public List<SaxEvent> saxEventList = new ArrayList();\n   Locator locator;\n   ElementPath globalElementPath = new ElementPath();\n\n   public SaxEventRecorder(Context context) {\n      this.cai = new ContextAwareImpl(context, this);\n   }\n\n   public final void recordEvents(InputStream inputStream) throws JoranException {\n      this.recordEvents(new InputSource(inputStream));\n   }\n\n   public List<SaxEvent> recordEvents(InputSource inputSource) throws JoranException {\n      SAXParser saxParser = this.buildSaxParser();\n\n      try {\n         saxParser.parse(inputSource, this);\n         return this.saxEventList;\n      } catch (IOException var4) {\n         this.handleError(\"I/O error occurred while parsing xml file\", var4);\n      } catch (SAXException var5) {\n         throw new JoranException(\"Problem parsing XML document. See previously reported errors.\", var5);\n      } catch (Exception var6) {\n         this.handleError(\"Unexpected exception while parsing XML document.\", var6);\n      }\n\n      throw new IllegalStateException(\"This point can never be reached\");\n   }\n\n   private void handleError(String errMsg, Throwable t) throws JoranException {\n      this.addError(errMsg, t);\n      throw new JoranException(errMsg, t);\n   }\n\n   private SAXParser buildSaxParser() throws JoranException {\n      try {\n         SAXParserFactory spf = SAXParserFactory.newInstance();\n         spf.setValidating(false);\n         spf.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n         spf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n         spf.setNamespaceAware(true);\n         return spf.newSAXParser();\n      } catch (Exception var3) {\n         String errMsg = \"Parser configuration error occurred\";\n         this.addError(errMsg, var3);\n         throw new JoranException(errMsg, var3);\n      }\n   }\n\n   public void startDocument() {\n   }\n\n   public Locator getLocator() {\n      return this.locator;\n   }\n\n   public void setDocumentLocator(Locator l) {\n      this.locator = l;\n   }\n\n   public void startElement(String namespaceURI, String localName, String qName, Attributes atts) {\n      String tagName = this.getTagName(localName, qName);\n      this.globalElementPath.push(tagName);\n      ElementPath current = this.globalElementPath.duplicate();\n      this.saxEventList.add(new StartEvent(current, namespaceURI, localName, qName, atts, this.getLocator()));\n   }\n\n   public void characters(char[] ch, int start, int length) {\n      String bodyStr = new String(ch, start, length);\n      SaxEvent lastEvent = this.getLastEvent();\n      if (lastEvent instanceof BodyEvent) {\n         BodyEvent be = (BodyEvent)lastEvent;\n         be.append(bodyStr);\n      } else if (!this.isSpaceOnly(bodyStr)) {\n         this.saxEventList.add(new BodyEvent(bodyStr, this.getLocator()));\n      }\n\n   }\n\n   boolean isSpaceOnly(String bodyStr) {\n      String bodyTrimmed = bodyStr.trim();\n      return bodyTrimmed.length() == 0;\n   }\n\n   SaxEvent getLastEvent() {\n      if (this.saxEventList.isEmpty()) {\n         return null;\n      } else {\n         int size = this.saxEventList.size();\n         return (SaxEvent)this.saxEventList.get(size - 1);\n      }\n   }\n\n   public void endElement(String namespaceURI, String localName, String qName) {\n      this.saxEventList.add(new EndEvent(namespaceURI, localName, qName, this.getLocator()));\n      this.globalElementPath.pop();\n   }\n\n   String getTagName(String localName, String qName) {\n      String tagName = localName;\n      if (localName == null || localName.length() < 1) {\n         tagName = qName;\n      }\n\n      return tagName;\n   }\n\n   public void error(SAXParseException spe) throws SAXException {\n      this.addError(\"XML_PARSING - Parsing error on line \" + spe.getLineNumber() + \" and column \" + spe.getColumnNumber());\n      this.addError(spe.toString());\n   }\n\n   public void fatalError(SAXParseException spe) throws SAXException {\n      this.addError(\"XML_PARSING - Parsing fatal error on line \" + spe.getLineNumber() + \" and column \" + spe.getColumnNumber());\n      this.addError(spe.toString());\n   }\n\n   public void warning(SAXParseException spe) throws SAXException {\n      this.addWarn(\"XML_PARSING - Parsing warning on line \" + spe.getLineNumber() + \" and column \" + spe.getColumnNumber(), spe);\n   }\n\n   public void addError(String msg) {\n      this.cai.addError(msg);\n   }\n\n   public void addError(String msg, Throwable ex) {\n      this.cai.addError(msg, ex);\n   }\n\n   public void addInfo(String msg) {\n      this.cai.addInfo(msg);\n   }\n\n   public void addInfo(String msg, Throwable ex) {\n      this.cai.addInfo(msg, ex);\n   }\n\n   public void addStatus(Status status) {\n      this.cai.addStatus(status);\n   }\n\n   public void addWarn(String msg) {\n      this.cai.addWarn(msg);\n   }\n\n   public void addWarn(String msg, Throwable ex) {\n      this.cai.addWarn(msg, ex);\n   }\n\n   public Context getContext() {\n      return this.cai.getContext();\n   }\n\n   public void setContext(Context context) {\n      this.cai.setContext(context);\n   }\n\n   public List<SaxEvent> getSaxEventList() {\n      return this.saxEventList;\n   }\n}\n"}