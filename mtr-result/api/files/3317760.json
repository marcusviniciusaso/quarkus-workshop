{"id":"3317760","content":"package ch.qos.logback.core;\n\nimport ch.qos.logback.core.spi.LifeCycle;\nimport ch.qos.logback.core.spi.LogbackLock;\nimport ch.qos.logback.core.status.StatusManager;\nimport ch.qos.logback.core.util.ContextUtil;\nimport ch.qos.logback.core.util.ExecutorServiceUtil;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.ScheduledFuture;\n\npublic class ContextBase implements Context, LifeCycle {\n   private long birthTime = System.currentTimeMillis();\n   private String name;\n   private StatusManager sm = new BasicStatusManager();\n   Map<String, String> propertyMap = new HashMap();\n   Map<String, Object> objectMap = new HashMap();\n   LogbackLock configurationLock = new LogbackLock();\n   private ScheduledExecutorService scheduledExecutorService;\n   protected List<ScheduledFuture<?>> scheduledFutures = new ArrayList(1);\n   private LifeCycleManager lifeCycleManager;\n   private boolean started;\n\n   public ContextBase() {\n      this.initCollisionMaps();\n   }\n\n   public StatusManager getStatusManager() {\n      return this.sm;\n   }\n\n   public void setStatusManager(StatusManager statusManager) {\n      if (statusManager == null) {\n         throw new IllegalArgumentException(\"null StatusManager not allowed\");\n      } else {\n         this.sm = statusManager;\n      }\n   }\n\n   public Map<String, String> getCopyOfPropertyMap() {\n      return new HashMap(this.propertyMap);\n   }\n\n   public void putProperty(String key, String val) {\n      if (\"HOSTNAME\".equalsIgnoreCase(key)) {\n         this.putHostnameProperty(val);\n      } else {\n         this.propertyMap.put(key, val);\n      }\n\n   }\n\n   protected void initCollisionMaps() {\n      this.putObject(\"FA_FILENAME_COLLISION_MAP\", new HashMap());\n      this.putObject(\"RFA_FILENAME_PATTERN_COLLISION_MAP\", new HashMap());\n   }\n\n   public String getProperty(String key) {\n      if (\"CONTEXT_NAME\".equals(key)) {\n         return this.getName();\n      } else {\n         return \"HOSTNAME\".equalsIgnoreCase(key) ? this.lazyGetHostname() : (String)this.propertyMap.get(key);\n      }\n   }\n\n   private String lazyGetHostname() {\n      String hostname = (String)this.propertyMap.get(\"HOSTNAME\");\n      if (hostname == null) {\n         hostname = (new ContextUtil(this)).safelyGetLocalHostName();\n         this.putHostnameProperty(hostname);\n      }\n\n      return hostname;\n   }\n\n   private void putHostnameProperty(String hostname) {\n      String existingHostname = (String)this.propertyMap.get(\"HOSTNAME\");\n      if (existingHostname == null) {\n         this.propertyMap.put(\"HOSTNAME\", hostname);\n      }\n\n   }\n\n   public Object getObject(String key) {\n      return this.objectMap.get(key);\n   }\n\n   public void putObject(String key, Object value) {\n      this.objectMap.put(key, value);\n   }\n\n   public void removeObject(String key) {\n      this.objectMap.remove(key);\n   }\n\n   public String getName() {\n      return this.name;\n   }\n\n   public void start() {\n      this.started = true;\n   }\n\n   public void stop() {\n      this.stopExecutorService();\n      this.started = false;\n   }\n\n   public boolean isStarted() {\n      return this.started;\n   }\n\n   public void reset() {\n      this.removeShutdownHook();\n      this.getLifeCycleManager().reset();\n      this.propertyMap.clear();\n      this.objectMap.clear();\n   }\n\n   public void setName(String name) throws IllegalStateException {\n      if (name == null || !name.equals(this.name)) {\n         if (this.name != null && !\"default\".equals(this.name)) {\n            throw new IllegalStateException(\"Context has been already given a name\");\n         } else {\n            this.name = name;\n         }\n      }\n   }\n\n   public long getBirthTime() {\n      return this.birthTime;\n   }\n\n   public Object getConfigurationLock() {\n      return this.configurationLock;\n   }\n\n   public synchronized ExecutorService getExecutorService() {\n      return this.getScheduledExecutorService();\n   }\n\n   public synchronized ScheduledExecutorService getScheduledExecutorService() {\n      if (this.scheduledExecutorService == null) {\n         this.scheduledExecutorService = ExecutorServiceUtil.newScheduledExecutorService();\n      }\n\n      return this.scheduledExecutorService;\n   }\n\n   private synchronized void stopExecutorService() {\n      if (this.scheduledExecutorService != null) {\n         ExecutorServiceUtil.shutdown(this.scheduledExecutorService);\n         this.scheduledExecutorService = null;\n      }\n\n   }\n\n   private void removeShutdownHook() {\n      Thread hook = (Thread)this.getObject(\"SHUTDOWN_HOOK\");\n      if (hook != null) {\n         this.removeObject(\"SHUTDOWN_HOOK\");\n\n         try {\n            Runtime.getRuntime().removeShutdownHook(hook);\n         } catch (IllegalStateException var3) {\n            ;\n         }\n      }\n\n   }\n\n   public void register(LifeCycle component) {\n      this.getLifeCycleManager().register(component);\n   }\n\n   synchronized LifeCycleManager getLifeCycleManager() {\n      if (this.lifeCycleManager == null) {\n         this.lifeCycleManager = new LifeCycleManager();\n      }\n\n      return this.lifeCycleManager;\n   }\n\n   public String toString() {\n      return this.name;\n   }\n\n   public void addScheduledFuture(ScheduledFuture<?> scheduledFuture) {\n      this.scheduledFutures.add(scheduledFuture);\n   }\n\n   public List<ScheduledFuture<?>> getScheduledFutures() {\n      return new ArrayList(this.scheduledFutures);\n   }\n}\n"}