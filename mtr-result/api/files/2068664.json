{"id":"2068664","content":"package ch.qos.logback.core.util;\n\nimport ch.qos.logback.core.Context;\nimport ch.qos.logback.core.spi.ContextAware;\nimport ch.qos.logback.core.spi.PropertyContainer;\nimport ch.qos.logback.core.spi.ScanException;\nimport ch.qos.logback.core.subst.NodeToStringTransformer;\nimport java.lang.reflect.Constructor;\nimport java.util.Iterator;\nimport java.util.Properties;\n\npublic class OptionHelper {\n   static final String DELIM_START = \"${\";\n   static final char DELIM_STOP = '}';\n   static final String DELIM_DEFAULT = \":-\";\n   static final int DELIM_START_LEN = 2;\n   static final int DELIM_STOP_LEN = 1;\n   static final int DELIM_DEFAULT_LEN = 2;\n   static final String _IS_UNDEFINED = \"_IS_UNDEFINED\";\n\n   public static Object instantiateByClassName(String className, Class<?> superClass, Context context) throws IncompatibleClassException, DynamicClassLoadingException {\n      ClassLoader classLoader = Loader.getClassLoaderOfObject(context);\n      return instantiateByClassName(className, superClass, classLoader);\n   }\n\n   public static Object instantiateByClassNameAndParameter(String className, Class<?> superClass, Context context, Class<?> type, Object param) throws IncompatibleClassException, DynamicClassLoadingException {\n      ClassLoader classLoader = Loader.getClassLoaderOfObject(context);\n      return instantiateByClassNameAndParameter(className, superClass, classLoader, type, param);\n   }\n\n   public static Object instantiateByClassName(String className, Class<?> superClass, ClassLoader classLoader) throws IncompatibleClassException, DynamicClassLoadingException {\n      return instantiateByClassNameAndParameter(className, superClass, (ClassLoader)classLoader, (Class)null, (Object)null);\n   }\n\n   public static Object instantiateByClassNameAndParameter(String className, Class<?> superClass, ClassLoader classLoader, Class<?> type, Object parameter) throws IncompatibleClassException, DynamicClassLoadingException {\n      if (className == null) {\n         throw new NullPointerException();\n      } else {\n         try {\n            Class<?> classObj = null;\n            classObj = classLoader.loadClass(className);\n            if (!superClass.isAssignableFrom(classObj)) {\n               throw new IncompatibleClassException(superClass, classObj);\n            } else if (type == null) {\n               return classObj.newInstance();\n            } else {\n               Constructor<?> constructor = classObj.getConstructor(type);\n               return constructor.newInstance(parameter);\n            }\n         } catch (IncompatibleClassException var7) {\n            throw var7;\n         } catch (Throwable var8) {\n            throw new DynamicClassLoadingException(\"Failed to instantiate type \" + className, var8);\n         }\n      }\n   }\n\n   public static String substVars(String val, PropertyContainer pc1) {\n      return substVars(val, pc1, (PropertyContainer)null);\n   }\n\n   public static String substVars(String input, PropertyContainer pc0, PropertyContainer pc1) {\n      try {\n         return NodeToStringTransformer.substituteVariable(input, pc0, pc1);\n      } catch (ScanException var4) {\n         throw new IllegalArgumentException(\"Failed to parse input [\" + input + \"]\", var4);\n      }\n   }\n\n   public static String propertyLookup(String key, PropertyContainer pc1, PropertyContainer pc2) {\n      String value = null;\n      value = pc1.getProperty(key);\n      if (value == null && pc2 != null) {\n         value = pc2.getProperty(key);\n      }\n\n      if (value == null) {\n         value = getSystemProperty(key, (String)null);\n      }\n\n      if (value == null) {\n         value = getEnv(key);\n      }\n\n      return value;\n   }\n\n   public static String getSystemProperty(String key, String def) {\n      try {\n         return System.getProperty(key, def);\n      } catch (SecurityException var3) {\n         return def;\n      }\n   }\n\n   public static String getEnv(String key) {\n      try {\n         return System.getenv(key);\n      } catch (SecurityException var2) {\n         return null;\n      }\n   }\n\n   public static String getSystemProperty(String key) {\n      try {\n         return System.getProperty(key);\n      } catch (SecurityException var2) {\n         return null;\n      }\n   }\n\n   public static void setSystemProperties(ContextAware contextAware, Properties props) {\n      Iterator var2 = props.keySet().iterator();\n\n      while(var2.hasNext()) {\n         Object o = var2.next();\n         String key = (String)o;\n         String value = props.getProperty(key);\n         setSystemProperty(contextAware, key, value);\n      }\n\n   }\n\n   public static void setSystemProperty(ContextAware contextAware, String key, String value) {\n      try {\n         System.setProperty(key, value);\n      } catch (SecurityException var4) {\n         contextAware.addError(\"Failed to set system property [\" + key + \"]\", var4);\n      }\n\n   }\n\n   public static Properties getSystemProperties() {\n      try {\n         return System.getProperties();\n      } catch (SecurityException var1) {\n         return new Properties();\n      }\n   }\n\n   public static String[] extractDefaultReplacement(String key) {\n      String[] result = new String[2];\n      if (key == null) {\n         return result;\n      } else {\n         result[0] = key;\n         int d = key.indexOf(\":-\");\n         if (d != -1) {\n            result[0] = key.substring(0, d);\n            result[1] = key.substring(d + 2);\n         }\n\n         return result;\n      }\n   }\n\n   public static boolean toBoolean(String value, boolean dEfault) {\n      if (value == null) {\n         return dEfault;\n      } else {\n         String trimmedVal = value.trim();\n         if (\"true\".equalsIgnoreCase(trimmedVal)) {\n            return true;\n         } else {\n            return \"false\".equalsIgnoreCase(trimmedVal) ? false : dEfault;\n         }\n      }\n   }\n\n   public static boolean isEmpty(String str) {\n      return str == null || str.length() == 0;\n   }\n\n   public static final boolean isNullOrEmpty(Object[] array) {\n      return array == null || array.length == 0;\n   }\n\n   public static final boolean isNotEmtpy(Object[] array) {\n      return !isNullOrEmpty(array);\n   }\n}\n"}