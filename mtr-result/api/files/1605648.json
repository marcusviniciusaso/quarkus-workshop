{"id":"1605648","content":"package org.springframework.aop.framework;\n\nimport org.springframework.aop.TargetSource;\nimport org.springframework.aop.framework.adapter.AdvisorAdapterRegistry;\nimport org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;\nimport org.springframework.aop.target.SingletonTargetSource;\nimport org.springframework.beans.factory.BeanClassLoaderAware;\nimport org.springframework.beans.factory.FactoryBean;\nimport org.springframework.beans.factory.FactoryBeanNotInitializedException;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.lang.Nullable;\nimport org.springframework.util.ClassUtils;\n\npublic abstract class AbstractSingletonProxyFactoryBean extends ProxyConfig implements FactoryBean<Object>, BeanClassLoaderAware, InitializingBean {\n   @Nullable\n   private Object target;\n   @Nullable\n   private Class<?>[] proxyInterfaces;\n   @Nullable\n   private Object[] preInterceptors;\n   @Nullable\n   private Object[] postInterceptors;\n   private AdvisorAdapterRegistry advisorAdapterRegistry = GlobalAdvisorAdapterRegistry.getInstance();\n   @Nullable\n   private transient ClassLoader proxyClassLoader;\n   @Nullable\n   private Object proxy;\n\n   public void setTarget(Object target) {\n      this.target = target;\n   }\n\n   public void setProxyInterfaces(Class<?>[] proxyInterfaces) {\n      this.proxyInterfaces = proxyInterfaces;\n   }\n\n   public void setPreInterceptors(Object[] preInterceptors) {\n      this.preInterceptors = preInterceptors;\n   }\n\n   public void setPostInterceptors(Object[] postInterceptors) {\n      this.postInterceptors = postInterceptors;\n   }\n\n   public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {\n      this.advisorAdapterRegistry = advisorAdapterRegistry;\n   }\n\n   public void setProxyClassLoader(ClassLoader classLoader) {\n      this.proxyClassLoader = classLoader;\n   }\n\n   public void setBeanClassLoader(ClassLoader classLoader) {\n      if (this.proxyClassLoader == null) {\n         this.proxyClassLoader = classLoader;\n      }\n\n   }\n\n   public void afterPropertiesSet() {\n      if (this.target == null) {\n         throw new IllegalArgumentException(\"Property 'target' is required\");\n      } else if (this.target instanceof String) {\n         throw new IllegalArgumentException(\"'target' needs to be a bean reference, not a bean name as value\");\n      } else {\n         if (this.proxyClassLoader == null) {\n            this.proxyClassLoader = ClassUtils.getDefaultClassLoader();\n         }\n\n         ProxyFactory proxyFactory = new ProxyFactory();\n         Object[] var2;\n         int var3;\n         int var4;\n         Object interceptor;\n         if (this.preInterceptors != null) {\n            var2 = this.preInterceptors;\n            var3 = var2.length;\n\n            for(var4 = 0; var4 < var3; ++var4) {\n               interceptor = var2[var4];\n               proxyFactory.addAdvisor(this.advisorAdapterRegistry.wrap(interceptor));\n            }\n         }\n\n         proxyFactory.addAdvisor(this.advisorAdapterRegistry.wrap(this.createMainInterceptor()));\n         if (this.postInterceptors != null) {\n            var2 = this.postInterceptors;\n            var3 = var2.length;\n\n            for(var4 = 0; var4 < var3; ++var4) {\n               interceptor = var2[var4];\n               proxyFactory.addAdvisor(this.advisorAdapterRegistry.wrap(interceptor));\n            }\n         }\n\n         proxyFactory.copyFrom(this);\n         TargetSource targetSource = this.createTargetSource(this.target);\n         proxyFactory.setTargetSource(targetSource);\n         if (this.proxyInterfaces != null) {\n            proxyFactory.setInterfaces(this.proxyInterfaces);\n         } else if (!this.isProxyTargetClass()) {\n            Class<?> targetClass = targetSource.getTargetClass();\n            if (targetClass != null) {\n               proxyFactory.setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.proxyClassLoader));\n            }\n         }\n\n         this.postProcessProxyFactory(proxyFactory);\n         this.proxy = proxyFactory.getProxy(this.proxyClassLoader);\n      }\n   }\n\n   protected TargetSource createTargetSource(Object target) {\n      return (TargetSource)(target instanceof TargetSource ? (TargetSource)target : new SingletonTargetSource(target));\n   }\n\n   protected void postProcessProxyFactory(ProxyFactory proxyFactory) {\n   }\n\n   public Object getObject() {\n      if (this.proxy == null) {\n         throw new FactoryBeanNotInitializedException();\n      } else {\n         return this.proxy;\n      }\n   }\n\n   @Nullable\n   public Class<?> getObjectType() {\n      if (this.proxy != null) {\n         return this.proxy.getClass();\n      } else if (this.proxyInterfaces != null && this.proxyInterfaces.length == 1) {\n         return this.proxyInterfaces[0];\n      } else if (this.target instanceof TargetSource) {\n         return ((TargetSource)this.target).getTargetClass();\n      } else {\n         return this.target != null ? this.target.getClass() : null;\n      }\n   }\n\n   public final boolean isSingleton() {\n      return true;\n   }\n\n   protected abstract Object createMainInterceptor();\n}\n"}