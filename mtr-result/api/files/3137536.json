{"id":"3137536","content":"package ch.qos.logback.classic.util;\n\nimport ch.qos.logback.classic.BasicConfigurator;\nimport ch.qos.logback.classic.LoggerContext;\nimport ch.qos.logback.classic.joran.JoranConfigurator;\nimport ch.qos.logback.classic.spi.Configurator;\nimport ch.qos.logback.core.LogbackException;\nimport ch.qos.logback.core.joran.spi.JoranException;\nimport ch.qos.logback.core.status.ErrorStatus;\nimport ch.qos.logback.core.status.InfoStatus;\nimport ch.qos.logback.core.status.StatusManager;\nimport ch.qos.logback.core.status.WarnStatus;\nimport ch.qos.logback.core.util.Loader;\nimport ch.qos.logback.core.util.OptionHelper;\nimport ch.qos.logback.core.util.StatusListenerConfigHelper;\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class ContextInitializer {\n   public static final String AUTOCONFIG_FILE = \"logback.xml\";\n   public static final String TEST_AUTOCONFIG_FILE = \"logback-test.xml\";\n   public static final String CONFIG_FILE_PROPERTY = \"logback.configurationFile\";\n   final LoggerContext loggerContext;\n\n   public ContextInitializer(LoggerContext loggerContext) {\n      this.loggerContext = loggerContext;\n   }\n\n   public void configureByResource(URL url) throws JoranException {\n      if (url == null) {\n         throw new IllegalArgumentException(\"URL argument cannot be null\");\n      } else {\n         String urlString = url.toString();\n         if (urlString.endsWith(\"xml\")) {\n            JoranConfigurator configurator = new JoranConfigurator();\n            configurator.setContext(this.loggerContext);\n            configurator.doConfigure(url);\n         } else {\n            throw new LogbackException(\"Unexpected filename extension of file [\" + url.toString() + \"]. Should be .xml\");\n         }\n      }\n   }\n\n   void joranConfigureByResource(URL url) throws JoranException {\n      JoranConfigurator configurator = new JoranConfigurator();\n      configurator.setContext(this.loggerContext);\n      configurator.doConfigure(url);\n   }\n\n   private URL findConfigFileURLFromSystemProperties(ClassLoader classLoader, boolean updateStatus) {\n      String logbackConfigFile = OptionHelper.getSystemProperty(\"logback.configurationFile\");\n      if (logbackConfigFile != null) {\n         URL result = null;\n\n         URL var7;\n         try {\n            result = new URL(logbackConfigFile);\n            URL var5 = result;\n            return var5;\n         } catch (MalformedURLException var13) {\n            result = Loader.getResource(logbackConfigFile, classLoader);\n            if (result != null) {\n               URL var15 = result;\n               return var15;\n            }\n\n            File f = new File(logbackConfigFile);\n            if (!f.exists() || !f.isFile()) {\n               return null;\n            }\n\n            try {\n               result = f.toURI().toURL();\n               var7 = result;\n            } catch (MalformedURLException var12) {\n               return null;\n            }\n         } finally {\n            if (updateStatus) {\n               this.statusOnResourceSearch(logbackConfigFile, classLoader, result);\n            }\n\n         }\n\n         return var7;\n      } else {\n         return null;\n      }\n   }\n\n   public URL findURLOfDefaultConfigurationFile(boolean updateStatus) {\n      ClassLoader myClassLoader = Loader.getClassLoaderOfObject(this);\n      URL url = this.findConfigFileURLFromSystemProperties(myClassLoader, updateStatus);\n      if (url != null) {\n         return url;\n      } else {\n         url = this.getResource(\"logback-test.xml\", myClassLoader, updateStatus);\n         return url != null ? url : this.getResource(\"logback.xml\", myClassLoader, updateStatus);\n      }\n   }\n\n   private URL getResource(String filename, ClassLoader myClassLoader, boolean updateStatus) {\n      URL url = Loader.getResource(filename, myClassLoader);\n      if (updateStatus) {\n         this.statusOnResourceSearch(filename, myClassLoader, url);\n      }\n\n      return url;\n   }\n\n   public void autoConfig() throws JoranException {\n      StatusListenerConfigHelper.installIfAsked(this.loggerContext);\n      URL url = this.findURLOfDefaultConfigurationFile(true);\n      if (url != null) {\n         this.configureByResource(url);\n      } else {\n         Configurator c = (Configurator)EnvUtil.loadFromServiceLoader(Configurator.class);\n         if (c != null) {\n            try {\n               c.setContext(this.loggerContext);\n               c.configure(this.loggerContext);\n            } catch (Exception var4) {\n               throw new LogbackException(String.format(\"Failed to initialize Configurator: %s using ServiceLoader\", c != null ? c.getClass().getCanonicalName() : \"null\"), var4);\n            }\n         } else {\n            BasicConfigurator basicConfigurator = new BasicConfigurator();\n            basicConfigurator.setContext(this.loggerContext);\n            basicConfigurator.configure(this.loggerContext);\n         }\n      }\n\n   }\n\n   private void statusOnResourceSearch(String resourceName, ClassLoader classLoader, URL url) {\n      StatusManager sm = this.loggerContext.getStatusManager();\n      if (url == null) {\n         sm.add(new InfoStatus(\"Could NOT find resource [\" + resourceName + \"]\", this.loggerContext));\n      } else {\n         sm.add(new InfoStatus(\"Found resource [\" + resourceName + \"] at [\" + url.toString() + \"]\", this.loggerContext));\n         this.multiplicityWarning(resourceName, classLoader);\n      }\n\n   }\n\n   private void multiplicityWarning(String resourceName, ClassLoader classLoader) {\n      Set<URL> urlSet = null;\n      StatusManager sm = this.loggerContext.getStatusManager();\n\n      try {\n         urlSet = Loader.getResources(resourceName, classLoader);\n      } catch (IOException var7) {\n         sm.add(new ErrorStatus(\"Failed to get url list for resource [\" + resourceName + \"]\", this.loggerContext, var7));\n      }\n\n      if (urlSet != null && urlSet.size() > 1) {\n         sm.add(new WarnStatus(\"Resource [\" + resourceName + \"] occurs multiple times on the classpath.\", this.loggerContext));\n         Iterator var5 = urlSet.iterator();\n\n         while(var5.hasNext()) {\n            URL url = (URL)var5.next();\n            sm.add(new WarnStatus(\"Resource [\" + resourceName + \"] occurs at [\" + url.toString() + \"]\", this.loggerContext));\n         }\n      }\n\n   }\n}\n"}