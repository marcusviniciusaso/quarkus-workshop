{"id":"1626264","content":"package org.springframework.aop.framework;\n\nimport org.aopalliance.intercept.Interceptor;\nimport org.springframework.aop.TargetSource;\nimport org.springframework.lang.Nullable;\nimport org.springframework.util.ClassUtils;\n\npublic class ProxyFactory extends ProxyCreatorSupport {\n   public ProxyFactory() {\n   }\n\n   public ProxyFactory(Object target) {\n      this.setTarget(target);\n      this.setInterfaces(ClassUtils.getAllInterfaces(target));\n   }\n\n   public ProxyFactory(Class... proxyInterfaces) {\n      this.setInterfaces(proxyInterfaces);\n   }\n\n   public ProxyFactory(Class<?> proxyInterface, Interceptor interceptor) {\n      this.addInterface(proxyInterface);\n      this.addAdvice(interceptor);\n   }\n\n   public ProxyFactory(Class<?> proxyInterface, TargetSource targetSource) {\n      this.addInterface(proxyInterface);\n      this.setTargetSource(targetSource);\n   }\n\n   public Object getProxy() {\n      return this.createAopProxy().getProxy();\n   }\n\n   public Object getProxy(@Nullable ClassLoader classLoader) {\n      return this.createAopProxy().getProxy(classLoader);\n   }\n\n   public static <T> T getProxy(Class<T> proxyInterface, Interceptor interceptor) {\n      return (new ProxyFactory(proxyInterface, interceptor)).getProxy();\n   }\n\n   public static <T> T getProxy(Class<T> proxyInterface, TargetSource targetSource) {\n      return (new ProxyFactory(proxyInterface, targetSource)).getProxy();\n   }\n\n   public static Object getProxy(TargetSource targetSource) {\n      if (targetSource.getTargetClass() == null) {\n         throw new IllegalArgumentException(\"Cannot create class proxy for TargetSource with null target class\");\n      } else {\n         ProxyFactory proxyFactory = new ProxyFactory();\n         proxyFactory.setTargetSource(targetSource);\n         proxyFactory.setProxyTargetClass(true);\n         return proxyFactory.getProxy();\n      }\n   }\n}\n"}