{"id":"1863720","content":"package ch.qos.logback.core.util;\n\nimport ch.qos.logback.core.Context;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.security.AccessController;\nimport java.security.PrivilegedAction;\nimport java.util.Enumeration;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Loader {\n   static final String TSTR = \"Caught Exception while in Loader.getResource. This may be innocuous.\";\n   private static boolean ignoreTCL = false;\n   public static final String IGNORE_TCL_PROPERTY_NAME = \"logback.ignoreTCL\";\n   private static boolean HAS_GET_CLASS_LOADER_PERMISSION = false;\n\n   public static Set<URL> getResources(String resource, ClassLoader classLoader) throws IOException {\n      Set<URL> urlSet = new HashSet();\n      Enumeration urlEnum = classLoader.getResources(resource);\n\n      while(urlEnum.hasMoreElements()) {\n         URL url = (URL)urlEnum.nextElement();\n         urlSet.add(url);\n      }\n\n      return urlSet;\n   }\n\n   public static URL getResource(String resource, ClassLoader classLoader) {\n      try {\n         return classLoader.getResource(resource);\n      } catch (Throwable var3) {\n         return null;\n      }\n   }\n\n   public static URL getResourceBySelfClassLoader(String resource) {\n      return getResource(resource, getClassLoaderOfClass(Loader.class));\n   }\n\n   public static ClassLoader getTCL() {\n      return Thread.currentThread().getContextClassLoader();\n   }\n\n   public static Class<?> loadClass(String clazz, Context context) throws ClassNotFoundException {\n      ClassLoader cl = getClassLoaderOfObject(context);\n      return cl.loadClass(clazz);\n   }\n\n   public static ClassLoader getClassLoaderOfObject(Object o) {\n      if (o == null) {\n         throw new NullPointerException(\"Argument cannot be null\");\n      } else {\n         return getClassLoaderOfClass(o.getClass());\n      }\n   }\n\n   public static ClassLoader getClassLoaderAsPrivileged(final Class<?> clazz) {\n      return !HAS_GET_CLASS_LOADER_PERMISSION ? null : (ClassLoader)AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {\n         public ClassLoader run() {\n            return clazz.getClassLoader();\n         }\n      });\n   }\n\n   public static ClassLoader getClassLoaderOfClass(Class<?> clazz) {\n      ClassLoader cl = clazz.getClassLoader();\n      return cl == null ? ClassLoader.getSystemClassLoader() : cl;\n   }\n\n   public static Class<?> loadClass(String clazz) throws ClassNotFoundException {\n      if (ignoreTCL) {\n         return Class.forName(clazz);\n      } else {\n         try {\n            return getTCL().loadClass(clazz);\n         } catch (Throwable var2) {\n            return Class.forName(clazz);\n         }\n      }\n   }\n\n   static {\n      String ignoreTCLProp = OptionHelper.getSystemProperty(\"logback.ignoreTCL\", (String)null);\n      if (ignoreTCLProp != null) {\n         ignoreTCL = OptionHelper.toBoolean(ignoreTCLProp, true);\n      }\n\n      HAS_GET_CLASS_LOADER_PERMISSION = ((Boolean)AccessController.doPrivileged(new PrivilegedAction<Boolean>() {\n         public Boolean run() {\n            try {\n               AccessController.checkPermission(new RuntimePermission(\"getClassLoader\"));\n               return true;\n            } catch (SecurityException var2) {\n               return false;\n            }\n         }\n      })).booleanValue();\n   }\n}\n"}