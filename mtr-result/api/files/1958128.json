{"id":"1958128","content":"package org.acme.rest;\n\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.Parameter;\nimport io.swagger.v3.oas.annotations.responses.ApiResponse;\nimport io.swagger.v3.oas.annotations.responses.ApiResponses;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport java.util.Collection;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport javax.validation.Valid;\nimport org.acme.domain.Fruit;\nimport org.acme.service.FruitService;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseStatus;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.servlet.mvc.method.annotation.SseEmitter;\n\n@RestController\n@RequestMapping({\"/fruits\"})\n@Tag(\n   name = \"Fruit Resource\",\n   description = \"Endpoints for fruits\"\n)\npublic class FruitController {\n   private final FruitService fruitService;\n\n   public FruitController(FruitService fruitService) {\n      this.fruitService = fruitService;\n   }\n\n   @GetMapping(\n      produces = {\"application/json\"}\n   )\n   @Operation(\n      summary = \"Get all fruits\",\n      description = \"Get all fruits\"\n   )\n   @ApiResponse(\n      responseCode = \"200\",\n      description = \"All fruits\"\n   )\n   public Collection<Fruit> list() {\n      return this.fruitService.getFruits();\n   }\n\n   @GetMapping(\n      path = {\"/{name}\"},\n      produces = {\"application/json\"}\n   )\n   @Operation(\n      summary = \"Get a fruit\",\n      description = \"Get a fruit\"\n   )\n   @ApiResponses({@ApiResponse(\n   responseCode = \"200\",\n   description = \"Requested fruit\"\n), @ApiResponse(\n   responseCode = \"404\",\n   description = \"Fruit not found\"\n)})\n   public ResponseEntity<Fruit> getFruit(@Parameter(required = true,description = \"Fruit name\") @PathVariable(\"name\") String param1) {\n      // $FF: Couldn't be decompiled\n   }\n\n   @PostMapping(\n      produces = {\"application/json\"},\n      consumes = {\"application/json\"}\n   )\n   @Operation(\n      summary = \"Add a new fruit\",\n      description = \"Add a new fruit\"\n   )\n   @ApiResponse(\n      responseCode = \"200\",\n      description = \"Fruit added\"\n   )\n   public Collection<Fruit> add(@Parameter(required = true,description = \"Fruit to add\") @Valid @RequestBody Fruit fruit) {\n      return this.fruitService.addFruit(fruit);\n   }\n\n   @DeleteMapping({\"/{name}\"})\n   @ResponseStatus(HttpStatus.NO_CONTENT)\n   @Operation(\n      summary = \"Delete a fruit\",\n      description = \"Delete a fruit\"\n   )\n   @ApiResponse(\n      responseCode = \"204\",\n      description = \"Fruit deleted\"\n   )\n   public void deleteFruit(@Parameter(required = true,description = \"Fruit name\") @PathVariable String name) {\n      this.fruitService.deleteFruit(name);\n   }\n\n   @GetMapping({\"/error\"})\n   @ResponseStatus(HttpStatus.NO_CONTENT)\n   @Operation(\n      summary = \"Do something that will most likely generate an error\",\n      description = \"Do something that will most likely generate an error\"\n   )\n   @ApiResponses({@ApiResponse(\n   responseCode = \"204\",\n   description = \"Success\"\n), @ApiResponse(\n   responseCode = \"500\",\n   description = \"Something bad happened\"\n)})\n   public void doSomethingGeneratingError() {\n      this.fruitService.performWorkGeneratingError();\n   }\n\n   @GetMapping(\n      path = {\"/stream\"},\n      produces = {\"text/event-stream\"}\n   )\n   @Operation(\n      summary = \"Stream a fruit every second\",\n      description = \"Stream a fruit every second\"\n   )\n   @ApiResponse(\n      responseCode = \"200\",\n      description = \"One fruit every second\"\n   )\n   public SseEmitter streamFruits() {\n      SseEmitter emitter = new SseEmitter();\n      AtomicInteger counter = new AtomicInteger();\n      ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();\n      emitter.scheduleWithFixedDelay(executor, 0L, 1L, TimeUnit.SECONDS);\n      return emitter;\n   }\n\n   // $FF: synthetic method\n   private void lambda$streamFruits$1(AtomicInteger param1, SseEmitter param2, ScheduledExecutorService param3) {\n      // $FF: Couldn't be decompiled\n   }\n\n   // $FF: synthetic method\n   private static ResponseEntity lambda$getFruit$0() {\n      return ResponseEntity.notFound().build();\n   }\n}\n"}