{"id":"1699992","content":"package ch.qos.logback.core.status;\n\nimport ch.qos.logback.core.CoreConstants;\nimport ch.qos.logback.core.helpers.Transform;\nimport ch.qos.logback.core.util.CachingDateFormatter;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport java.util.Iterator;\nimport java.util.List;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic abstract class ViewStatusMessagesServletBase extends HttpServlet {\n   private static final long serialVersionUID = -3551928133801157219L;\n   private static CachingDateFormatter SDF = new CachingDateFormatter(\"yyyy-MM-dd HH:mm:ss\");\n   static String SUBMIT = \"submit\";\n   static String CLEAR = \"Clear\";\n   int count;\n\n   protected abstract StatusManager getStatusManager(HttpServletRequest var1, HttpServletResponse var2);\n\n   protected abstract String getPageTitle(HttpServletRequest var1, HttpServletResponse var2);\n\n   protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n      this.count = 0;\n      StatusManager sm = this.getStatusManager(req, resp);\n      resp.setContentType(\"text/html\");\n      PrintWriter output = resp.getWriter();\n      output.append(\"<html>\\r\\n\");\n      output.append(\"<head>\\r\\n\");\n      this.printCSS(req.getContextPath(), output);\n      output.append(\"</head>\\r\\n\");\n      output.append(\"<body>\\r\\n\");\n      output.append(this.getPageTitle(req, resp));\n      output.append(\"<form method=\\\"POST\\\">\\r\\n\");\n      output.append(\"<input type=\\\"submit\\\" name=\\\"\" + SUBMIT + \"\\\" value=\\\"\" + CLEAR + \"\\\">\");\n      output.append(\"</form>\\r\\n\");\n      if (CLEAR.equalsIgnoreCase(req.getParameter(SUBMIT))) {\n         sm.clear();\n         sm.add(new InfoStatus(\"Cleared all status messages\", this));\n      }\n\n      output.append(\"<table>\");\n      StringBuilder buf = new StringBuilder();\n      if (sm != null) {\n         this.printList(buf, sm);\n      } else {\n         output.append(\"Could not find status manager\");\n      }\n\n      output.append(buf);\n      output.append(\"</table>\");\n      output.append(\"</body>\\r\\n\");\n      output.append(\"</html>\\r\\n\");\n      output.flush();\n      output.close();\n   }\n\n   public void printCSS(String localRef, PrintWriter output) {\n      output.append(\"  <STYLE TYPE=\\\"text/css\\\">\\r\\n\");\n      output.append(\"    .warn  { font-weight: bold; color: #FF6600;} \\r\\n\");\n      output.append(\"    .error { font-weight: bold; color: #CC0000;} \\r\\n\");\n      output.append(\"    table { margin-left: 2em; margin-right: 2em; border-left: 2px solid #AAA; }\\r\\n\");\n      output.append(\"    tr.even { background: #FFFFFF; }\\r\\n\");\n      output.append(\"    tr.odd  { background: #EAEAEA; }\\r\\n\");\n      output.append(\"    td { padding-right: 1ex; padding-left: 1ex; border-right: 2px solid #AAA; }\\r\\n\");\n      output.append(\"    td.date { text-align: right; font-family: courier, monospace; font-size: smaller; }\");\n      output.append(CoreConstants.LINE_SEPARATOR);\n      output.append(\"  td.level { text-align: right; }\");\n      output.append(CoreConstants.LINE_SEPARATOR);\n      output.append(\"    tr.header { background: #596ED5; color: #FFF; font-weight: bold; font-size: larger; }\");\n      output.append(CoreConstants.LINE_SEPARATOR);\n      output.append(\"  td.exception { background: #A2AEE8; white-space: pre; font-family: courier, monospace;}\");\n      output.append(CoreConstants.LINE_SEPARATOR);\n      output.append(\"  </STYLE>\\r\\n\");\n   }\n\n   public void printList(StringBuilder buf, StatusManager sm) {\n      buf.append(\"<table>\\r\\n\");\n      this.printHeader(buf);\n      List<Status> statusList = sm.getCopyOfStatusList();\n      Iterator var4 = statusList.iterator();\n\n      while(var4.hasNext()) {\n         Status s = (Status)var4.next();\n         ++this.count;\n         this.printStatus(buf, s);\n      }\n\n      buf.append(\"</table>\\r\\n\");\n   }\n\n   public void printHeader(StringBuilder buf) {\n      buf.append(\"  <tr class=\\\"header\\\">\\r\\n\");\n      buf.append(\"    <th>Date </th>\\r\\n\");\n      buf.append(\"    <th>Level</th>\\r\\n\");\n      buf.append(\"    <th>Origin</th>\\r\\n\");\n      buf.append(\"    <th>Message</th>\\r\\n\");\n      buf.append(\"  </tr>\\r\\n\");\n   }\n\n   String statusLevelAsString(Status s) {\n      switch(s.getEffectiveLevel()) {\n      case 0:\n         return \"INFO\";\n      case 1:\n         return \"<span class=\\\"warn\\\">WARN</span>\";\n      case 2:\n         return \"<span class=\\\"error\\\">ERROR</span>\";\n      default:\n         return null;\n      }\n   }\n\n   String abbreviatedOrigin(Status s) {\n      Object o = s.getOrigin();\n      if (o == null) {\n         return null;\n      } else {\n         String fqClassName = o.getClass().getName();\n         int lastIndex = fqClassName.lastIndexOf(46);\n         return lastIndex != -1 ? fqClassName.substring(lastIndex + 1, fqClassName.length()) : fqClassName;\n      }\n   }\n\n   private void printStatus(StringBuilder buf, Status s) {\n      String trClass;\n      if (this.count % 2 == 0) {\n         trClass = \"even\";\n      } else {\n         trClass = \"odd\";\n      }\n\n      buf.append(\"  <tr class=\\\"\").append(trClass).append(\"\\\">\\r\\n\");\n      String dateStr = SDF.format(s.getDate().longValue());\n      buf.append(\"    <td class=\\\"date\\\">\").append(dateStr).append(\"</td>\\r\\n\");\n      buf.append(\"    <td class=\\\"level\\\">\").append(this.statusLevelAsString(s)).append(\"</td>\\r\\n\");\n      buf.append(\"    <td>\").append(this.abbreviatedOrigin(s)).append(\"</td>\\r\\n\");\n      buf.append(\"    <td>\").append(s.getMessage()).append(\"</td>\\r\\n\");\n      buf.append(\"  </tr>\\r\\n\");\n      if (s.getThrowable() != null) {\n         this.printThrowable(buf, s.getThrowable());\n      }\n\n   }\n\n   private void printThrowable(StringBuilder buf, Throwable t) {\n      buf.append(\"  <tr>\\r\\n\");\n      buf.append(\"    <td colspan=\\\"4\\\" class=\\\"exception\\\"><pre>\");\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw);\n      t.printStackTrace(pw);\n      buf.append(Transform.escapeTags(sw.getBuffer()));\n      buf.append(\"    </pre></td>\\r\\n\");\n      buf.append(\"  </tr>\\r\\n\");\n   }\n}\n"}