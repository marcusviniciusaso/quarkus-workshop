{"id":"1695928","content":"package org.springdoc.webmvc.api;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport io.swagger.v3.core.util.PathUtils;\nimport io.swagger.v3.oas.models.OpenAPI;\nimport java.util.Comparator;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.TreeMap;\nimport java.util.Map.Entry;\nimport java.util.function.BiConsumer;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.IntFunction;\nimport javax.servlet.http.HttpServletRequest;\nimport org.springdoc.api.AbstractOpenApiResource;\nimport org.springdoc.core.AbstractRequestService;\nimport org.springdoc.core.GenericResponseService;\nimport org.springdoc.core.OpenAPIService;\nimport org.springdoc.core.OperationService;\nimport org.springdoc.core.SpringDocConfigProperties;\nimport org.springdoc.core.SpringDocProviders;\nimport org.springdoc.core.customizers.SpringDocCustomizers;\nimport org.springdoc.core.fn.RouterOperation;\nimport org.springdoc.core.providers.ActuatorProvider;\nimport org.springdoc.core.providers.RepositoryRestResourceProvider;\nimport org.springdoc.core.providers.SecurityOAuth2Provider;\nimport org.springdoc.core.providers.SpringWebProvider;\nimport org.springframework.aop.support.AopUtils;\nimport org.springframework.beans.factory.ObjectFactory;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.MimeType;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.method.HandlerMethod;\nimport org.springframework.web.servlet.mvc.method.RequestMappingInfo;\n\npublic abstract class OpenApiResource extends AbstractOpenApiResource {\n   public OpenApiResource(String groupName, ObjectFactory<OpenAPIService> openAPIBuilderObjectFactory, AbstractRequestService requestBuilder, GenericResponseService responseBuilder, OperationService operationParser, SpringDocConfigProperties springDocConfigProperties, SpringDocProviders springDocProviders, SpringDocCustomizers springDocCustomizers) {\n      super(groupName, openAPIBuilderObjectFactory, requestBuilder, responseBuilder, operationParser, springDocConfigProperties, springDocProviders, springDocCustomizers);\n   }\n\n   public OpenApiResource(ObjectFactory<OpenAPIService> openAPIBuilderObjectFactory, AbstractRequestService requestBuilder, GenericResponseService responseBuilder, OperationService operationParser, SpringDocConfigProperties springDocConfigProperties, SpringDocProviders springDocProviders, SpringDocCustomizers springDocCustomizers) {\n      super(\"springdocDefault\", openAPIBuilderObjectFactory, requestBuilder, responseBuilder, operationParser, springDocConfigProperties, springDocProviders, springDocCustomizers);\n   }\n\n   public byte[] openapiJson(HttpServletRequest request, String apiDocsUrl, Locale locale) throws JsonProcessingException {\n      this.calculateServerUrl(request, apiDocsUrl, locale);\n      OpenAPI openAPI = this.getOpenApi(locale);\n      return this.writeJsonValue(openAPI);\n   }\n\n   public byte[] openapiYaml(HttpServletRequest request, String apiDocsUrl, Locale locale) throws JsonProcessingException {\n      this.calculateServerUrl(request, apiDocsUrl, locale);\n      OpenAPI openAPI = this.getOpenApi(locale);\n      return this.writeYamlValue(openAPI);\n   }\n\n   protected void getPaths(Map<String, Object> restControllers, Locale locale, OpenAPI openAPI) {\n      Optional<SpringWebProvider> springWebProviderOptional = this.springDocProviders.getSpringWebProvider();\n      springWebProviderOptional.ifPresent((springWebProvider) -> {\n         Map<RequestMappingInfo, HandlerMethod> map = springWebProvider.getHandlerMethods();\n         Optional<RepositoryRestResourceProvider> repositoryRestResourceProviderOptional = this.springDocProviders.getRepositoryRestResourceProvider();\n         repositoryRestResourceProviderOptional.ifPresent((restResourceProvider) -> {\n            List<RouterOperation> operationList = restResourceProvider.getRouterOperations(openAPI, locale);\n            this.calculatePath(operationList, locale, openAPI);\n            restResourceProvider.customize(openAPI);\n            Map<RequestMappingInfo, HandlerMethod> mapDataRest = restResourceProvider.getHandlerMethods();\n            Map<String, Object> requestMappingMap = restResourceProvider.getBasePathAwareControllerEndpoints();\n            Class[] additionalRestClasses = (Class[])requestMappingMap.values().stream().map(AopUtils::getTargetClass).toArray((x$0) -> {\n               return new Class[x$0];\n            });\n            AbstractOpenApiResource.addRestControllers(additionalRestClasses);\n            map.putAll(mapDataRest);\n         });\n         Optional<ActuatorProvider> actuatorProviderOptional = this.springDocProviders.getActuatorProvider();\n         if (actuatorProviderOptional.isPresent() && this.springDocConfigProperties.isShowActuator()) {\n            Map<RequestMappingInfo, HandlerMethod> actuatorMap = ((ActuatorProvider)actuatorProviderOptional.get()).getMethods();\n            this.openAPIService.addTag(new HashSet(actuatorMap.values()), ActuatorProvider.getTag());\n            map.putAll(actuatorMap);\n         }\n\n         this.calculatePath(restControllers, map, locale, openAPI);\n      });\n      Optional<SecurityOAuth2Provider> securityOAuth2ProviderOptional = this.springDocProviders.getSpringSecurityOAuth2Provider();\n      if (securityOAuth2ProviderOptional.isPresent()) {\n         SecurityOAuth2Provider securityOAuth2Provider = (SecurityOAuth2Provider)securityOAuth2ProviderOptional.get();\n         Map<RequestMappingInfo, HandlerMethod> mapOauth = securityOAuth2Provider.getHandlerMethods();\n         Map<String, Object> requestMappingMapSec = securityOAuth2Provider.getFrameworkEndpoints();\n         Class[] additionalRestClasses = (Class[])requestMappingMapSec.values().stream().map(AopUtils::getTargetClass).toArray((x$0) -> {\n            return new Class[x$0];\n         });\n         AbstractOpenApiResource.addRestControllers(additionalRestClasses);\n         this.calculatePath(requestMappingMapSec, mapOauth, locale, openAPI);\n      }\n\n      this.springDocProviders.getRouterFunctionProvider().ifPresent((routerFunctions) -> {\n         routerFunctions.getRouterFunctionPaths().ifPresent((routerBeans) -> {\n            routerBeans.forEach((beanName, routerFunctionVisitor) -> {\n               this.getRouterFunctionPaths(beanName, routerFunctionVisitor, locale, openAPI);\n            });\n         });\n      });\n   }\n\n   protected void calculatePath(Map<String, Object> restControllers, Map<RequestMappingInfo, HandlerMethod> map, Locale locale, OpenAPI openAPI) {\n      TreeMap<RequestMappingInfo, HandlerMethod> methodTreeMap = new TreeMap(this.byReversedRequestMappingInfos());\n      methodTreeMap.putAll(map);\n      Optional<SpringWebProvider> springWebProviderOptional = this.springDocProviders.getSpringWebProvider();\n      springWebProviderOptional.ifPresent((springWebProvider) -> {\n         Iterator var6 = methodTreeMap.entrySet().iterator();\n\n         label38:\n         while(true) {\n            RequestMappingInfo requestMappingInfo;\n            HandlerMethod handlerMethod;\n            Set patterns;\n            do {\n               if (!var6.hasNext()) {\n                  return;\n               }\n\n               Entry<RequestMappingInfo, HandlerMethod> entry = (Entry)var6.next();\n               requestMappingInfo = (RequestMappingInfo)entry.getKey();\n               handlerMethod = (HandlerMethod)entry.getValue();\n               patterns = springWebProvider.getActivePatterns(requestMappingInfo);\n            } while(CollectionUtils.isEmpty(patterns));\n\n            Map<String, String> regexMap = new LinkedHashMap();\n            Iterator var12 = patterns.iterator();\n\n            while(true) {\n               String operationPath;\n               String[] produces;\n               String[] consumes;\n               String[] headers;\n               String[] params;\n               do {\n                  if (!var12.hasNext()) {\n                     continue label38;\n                  }\n\n                  String pattern = (String)var12.next();\n                  operationPath = PathUtils.parsePath(pattern, regexMap);\n                  produces = (String[])requestMappingInfo.getProducesCondition().getProducibleMediaTypes().stream().map(MimeType::toString).toArray((x$0) -> {\n                     return new String[x$0];\n                  });\n                  consumes = (String[])requestMappingInfo.getConsumesCondition().getConsumableMediaTypes().stream().map(MimeType::toString).toArray((x$0) -> {\n                     return new String[x$0];\n                  });\n                  headers = (String[])requestMappingInfo.getHeadersCondition().getExpressions().stream().map(Object::toString).toArray((x$0) -> {\n                     return new String[x$0];\n                  });\n                  params = (String[])requestMappingInfo.getParamsCondition().getExpressions().stream().map(Object::toString).toArray((x$0) -> {\n                     return new String[x$0];\n                  });\n               } while(!this.isRestController(restControllers, handlerMethod, operationPath) && !this.isActuatorRestController(operationPath, handlerMethod));\n\n               if (this.isFilterCondition(handlerMethod, operationPath, produces, consumes, headers)) {\n                  Set<RequestMethod> requestMethods = requestMappingInfo.getMethodsCondition().getMethods();\n                  if (requestMethods.isEmpty()) {\n                     requestMethods = this.getDefaultAllowedHttpMethods();\n                  }\n\n                  this.calculatePath(handlerMethod, operationPath, requestMethods, consumes, produces, headers, params, locale, openAPI);\n               }\n            }\n         }\n      });\n   }\n\n   private Comparator<RequestMappingInfo> byReversedRequestMappingInfos() {\n      return (o2, o1) -> {\n         return o1.toString().compareTo(o2.toString());\n      };\n   }\n\n   protected void calculateServerUrl(HttpServletRequest request, String apiDocsUrl, Locale locale) {\n      super.initOpenAPIBuilder(locale);\n      String calculatedUrl = this.getServerUrl(request, apiDocsUrl);\n      this.openAPIService.setServerBaseUrl(calculatedUrl);\n   }\n\n   protected abstract String getServerUrl(HttpServletRequest var1, String var2);\n}\n"}