{"id":"1507512","content":"package ch.qos.logback.core.net.server;\n\nimport ch.qos.logback.core.AppenderBase;\nimport ch.qos.logback.core.spi.PreSerializationTransformer;\nimport java.io.IOException;\nimport java.io.Serializable;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.UnknownHostException;\nimport java.util.concurrent.Executor;\nimport javax.net.ServerSocketFactory;\n\npublic abstract class AbstractServerSocketAppender<E> extends AppenderBase<E> {\n   public static final int DEFAULT_BACKLOG = 50;\n   public static final int DEFAULT_CLIENT_QUEUE_SIZE = 100;\n   private int port = 4560;\n   private int backlog = 50;\n   private int clientQueueSize = 100;\n   private String address;\n   private ServerRunner<RemoteReceiverClient> runner;\n\n   public void start() {\n      if (!this.isStarted()) {\n         try {\n            ServerSocket socket = this.getServerSocketFactory().createServerSocket(this.getPort(), this.getBacklog(), this.getInetAddress());\n            ServerListener<RemoteReceiverClient> listener = this.createServerListener(socket);\n            this.runner = this.createServerRunner(listener, this.getContext().getExecutorService());\n            this.runner.setContext(this.getContext());\n            this.getContext().getExecutorService().execute(this.runner);\n            super.start();\n         } catch (Exception var3) {\n            this.addError(\"server startup error: \" + var3, var3);\n         }\n\n      }\n   }\n\n   protected ServerListener<RemoteReceiverClient> createServerListener(ServerSocket socket) {\n      return new RemoteReceiverServerListener(socket);\n   }\n\n   protected ServerRunner<RemoteReceiverClient> createServerRunner(ServerListener<RemoteReceiverClient> listener, Executor executor) {\n      return new RemoteReceiverServerRunner(listener, executor, this.getClientQueueSize());\n   }\n\n   public void stop() {\n      if (this.isStarted()) {\n         try {\n            this.runner.stop();\n            super.stop();\n         } catch (IOException var2) {\n            this.addError(\"server shutdown error: \" + var2, var2);\n         }\n\n      }\n   }\n\n   protected void append(E event) {\n      if (event != null) {\n         this.postProcessEvent(event);\n         final Serializable serEvent = this.getPST().transform(event);\n         this.runner.accept(new ClientVisitor<RemoteReceiverClient>() {\n            public void visit(RemoteReceiverClient client) {\n               client.offer(serEvent);\n            }\n         });\n      }\n   }\n\n   protected abstract void postProcessEvent(E var1);\n\n   protected abstract PreSerializationTransformer<E> getPST();\n\n   protected ServerSocketFactory getServerSocketFactory() throws Exception {\n      return ServerSocketFactory.getDefault();\n   }\n\n   protected InetAddress getInetAddress() throws UnknownHostException {\n      return this.getAddress() == null ? null : InetAddress.getByName(this.getAddress());\n   }\n\n   public int getPort() {\n      return this.port;\n   }\n\n   public void setPort(int port) {\n      this.port = port;\n   }\n\n   public int getBacklog() {\n      return this.backlog;\n   }\n\n   public void setBacklog(int backlog) {\n      this.backlog = backlog;\n   }\n\n   public String getAddress() {\n      return this.address;\n   }\n\n   public void setAddress(String address) {\n      this.address = address;\n   }\n\n   public int getClientQueueSize() {\n      return this.clientQueueSize;\n   }\n\n   public void setClientQueueSize(int clientQueueSize) {\n      this.clientQueueSize = clientQueueSize;\n   }\n}\n"}