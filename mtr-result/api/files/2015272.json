{"id":"2015272","content":"package org.springframework.aop.aspectj;\n\nimport java.lang.reflect.InvocationTargetException;\nimport org.springframework.aop.framework.AopConfigException;\nimport org.springframework.lang.Nullable;\nimport org.springframework.util.Assert;\nimport org.springframework.util.ReflectionUtils;\n\npublic class SimpleAspectInstanceFactory implements AspectInstanceFactory {\n   private final Class<?> aspectClass;\n\n   public SimpleAspectInstanceFactory(Class<?> aspectClass) {\n      Assert.notNull(aspectClass, \"Aspect class must not be null\");\n      this.aspectClass = aspectClass;\n   }\n\n   public final Class<?> getAspectClass() {\n      return this.aspectClass;\n   }\n\n   public final Object getAspectInstance() {\n      try {\n         return ReflectionUtils.accessibleConstructor(this.aspectClass, new Class[0]).newInstance();\n      } catch (NoSuchMethodException var2) {\n         throw new AopConfigException(\"No default constructor on aspect class: \" + this.aspectClass.getName(), var2);\n      } catch (InstantiationException var3) {\n         throw new AopConfigException(\"Unable to instantiate aspect class: \" + this.aspectClass.getName(), var3);\n      } catch (IllegalAccessException var4) {\n         throw new AopConfigException(\"Could not access aspect constructor: \" + this.aspectClass.getName(), var4);\n      } catch (InvocationTargetException var5) {\n         throw new AopConfigException(\"Failed to invoke aspect constructor: \" + this.aspectClass.getName(), var5.getTargetException());\n      }\n   }\n\n   @Nullable\n   public ClassLoader getAspectClassLoader() {\n      return this.aspectClass.getClassLoader();\n   }\n\n   public int getOrder() {\n      return this.getOrderForAspectClass(this.aspectClass);\n   }\n\n   protected int getOrderForAspectClass(Class<?> aspectClass) {\n      return Integer.MAX_VALUE;\n   }\n}\n"}