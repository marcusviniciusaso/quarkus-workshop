{"id":"1949736","content":"package org.springframework.aop.framework;\n\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport org.springframework.aop.Advisor;\nimport org.springframework.aop.support.AopUtils;\nimport org.springframework.beans.factory.config.BeanPostProcessor;\nimport org.springframework.core.SmartClassLoader;\nimport org.springframework.lang.Nullable;\n\npublic abstract class AbstractAdvisingBeanPostProcessor extends ProxyProcessorSupport implements BeanPostProcessor {\n   @Nullable\n   protected Advisor advisor;\n   protected boolean beforeExistingAdvisors = false;\n   private final Map<Class<?>, Boolean> eligibleBeans = new ConcurrentHashMap(256);\n\n   public void setBeforeExistingAdvisors(boolean beforeExistingAdvisors) {\n      this.beforeExistingAdvisors = beforeExistingAdvisors;\n   }\n\n   public Object postProcessBeforeInitialization(Object bean, String beanName) {\n      return bean;\n   }\n\n   public Object postProcessAfterInitialization(Object bean, String beanName) {\n      if (this.advisor != null && !(bean instanceof AopInfrastructureBean)) {\n         if (bean instanceof Advised) {\n            Advised advised = (Advised)bean;\n            if (!advised.isFrozen() && this.isEligible(AopUtils.getTargetClass(bean))) {\n               if (this.beforeExistingAdvisors) {\n                  advised.addAdvisor(0, this.advisor);\n               } else {\n                  advised.addAdvisor(this.advisor);\n               }\n\n               return bean;\n            }\n         }\n\n         if (this.isEligible(bean, beanName)) {\n            ProxyFactory proxyFactory = this.prepareProxyFactory(bean, beanName);\n            if (!proxyFactory.isProxyTargetClass()) {\n               this.evaluateProxyInterfaces(bean.getClass(), proxyFactory);\n            }\n\n            proxyFactory.addAdvisor(this.advisor);\n            this.customizeProxyFactory(proxyFactory);\n            ClassLoader classLoader = this.getProxyClassLoader();\n            if (classLoader instanceof SmartClassLoader && classLoader != bean.getClass().getClassLoader()) {\n               classLoader = ((SmartClassLoader)classLoader).getOriginalClassLoader();\n            }\n\n            return proxyFactory.getProxy(classLoader);\n         } else {\n            return bean;\n         }\n      } else {\n         return bean;\n      }\n   }\n\n   protected boolean isEligible(Object bean, String beanName) {\n      return this.isEligible(bean.getClass());\n   }\n\n   protected boolean isEligible(Class<?> targetClass) {\n      Boolean eligible = (Boolean)this.eligibleBeans.get(targetClass);\n      if (eligible != null) {\n         return eligible.booleanValue();\n      } else if (this.advisor == null) {\n         return false;\n      } else {\n         eligible = AopUtils.canApply(this.advisor, targetClass);\n         this.eligibleBeans.put(targetClass, eligible);\n         return eligible.booleanValue();\n      }\n   }\n\n   protected ProxyFactory prepareProxyFactory(Object bean, String beanName) {\n      ProxyFactory proxyFactory = new ProxyFactory();\n      proxyFactory.copyFrom(this);\n      proxyFactory.setTarget(bean);\n      return proxyFactory;\n   }\n\n   protected void customizeProxyFactory(ProxyFactory proxyFactory) {\n   }\n}\n"}