{"id":"1540328","content":"package org.springframework.aop.config;\n\nimport org.springframework.aop.aspectj.AspectInstanceFactory;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.config.ConfigurableBeanFactory;\nimport org.springframework.core.Ordered;\nimport org.springframework.lang.Nullable;\nimport org.springframework.util.Assert;\nimport org.springframework.util.ClassUtils;\n\npublic class SimpleBeanFactoryAwareAspectInstanceFactory implements AspectInstanceFactory, BeanFactoryAware {\n   @Nullable\n   private String aspectBeanName;\n   @Nullable\n   private BeanFactory beanFactory;\n\n   public void setAspectBeanName(String aspectBeanName) {\n      this.aspectBeanName = aspectBeanName;\n   }\n\n   public void setBeanFactory(BeanFactory beanFactory) {\n      this.beanFactory = beanFactory;\n      Assert.notNull(this.aspectBeanName, \"'aspectBeanName' is required\");\n   }\n\n   public Object getAspectInstance() {\n      Assert.state(this.beanFactory != null, \"No BeanFactory set\");\n      Assert.state(this.aspectBeanName != null, \"No 'aspectBeanName' set\");\n      return this.beanFactory.getBean(this.aspectBeanName);\n   }\n\n   @Nullable\n   public ClassLoader getAspectClassLoader() {\n      return this.beanFactory instanceof ConfigurableBeanFactory ? ((ConfigurableBeanFactory)this.beanFactory).getBeanClassLoader() : ClassUtils.getDefaultClassLoader();\n   }\n\n   public int getOrder() {\n      return this.beanFactory != null && this.aspectBeanName != null && this.beanFactory.isSingleton(this.aspectBeanName) && this.beanFactory.isTypeMatch(this.aspectBeanName, Ordered.class) ? ((Ordered)this.beanFactory.getBean(this.aspectBeanName)).getOrder() : Integer.MAX_VALUE;\n   }\n}\n"}