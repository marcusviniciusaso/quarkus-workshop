{"id":"2085104","content":"package org.springframework.aop.interceptor;\n\nimport java.lang.reflect.Method;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.Future;\nimport org.aopalliance.intercept.MethodInterceptor;\nimport org.aopalliance.intercept.MethodInvocation;\nimport org.springframework.aop.support.AopUtils;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.core.BridgeMethodResolver;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.task.AsyncTaskExecutor;\nimport org.springframework.core.task.SimpleAsyncTaskExecutor;\nimport org.springframework.lang.Nullable;\nimport org.springframework.util.ClassUtils;\n\npublic class AsyncExecutionInterceptor extends AsyncExecutionAspectSupport implements MethodInterceptor, Ordered {\n   public AsyncExecutionInterceptor(@Nullable Executor defaultExecutor) {\n      super(defaultExecutor);\n   }\n\n   public AsyncExecutionInterceptor(@Nullable Executor defaultExecutor, AsyncUncaughtExceptionHandler exceptionHandler) {\n      super(defaultExecutor, exceptionHandler);\n   }\n\n   @Nullable\n   public Object invoke(MethodInvocation invocation) throws Throwable {\n      Class<?> targetClass = invocation.getThis() != null ? AopUtils.getTargetClass(invocation.getThis()) : null;\n      Method specificMethod = ClassUtils.getMostSpecificMethod(invocation.getMethod(), targetClass);\n      Method userDeclaredMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);\n      AsyncTaskExecutor executor = this.determineAsyncExecutor(userDeclaredMethod);\n      if (executor == null) {\n         throw new IllegalStateException(\"No executor specified and no default executor set on AsyncExecutionInterceptor either\");\n      } else {\n         Callable<Object> task = () -> {\n            try {\n               Object result = invocation.proceed();\n               if (result instanceof Future) {\n                  return ((Future)result).get();\n               }\n            } catch (ExecutionException var4) {\n               this.handleError(var4.getCause(), userDeclaredMethod, invocation.getArguments());\n            } catch (Throwable var5) {\n               this.handleError(var5, userDeclaredMethod, invocation.getArguments());\n            }\n\n            return null;\n         };\n         return this.doSubmit(task, executor, invocation.getMethod().getReturnType());\n      }\n   }\n\n   @Nullable\n   protected String getExecutorQualifier(Method method) {\n      return null;\n   }\n\n   @Nullable\n   protected Executor getDefaultExecutor(@Nullable BeanFactory beanFactory) {\n      Executor defaultExecutor = super.getDefaultExecutor(beanFactory);\n      return (Executor)(defaultExecutor != null ? defaultExecutor : new SimpleAsyncTaskExecutor());\n   }\n\n   public int getOrder() {\n      return Integer.MIN_VALUE;\n   }\n}\n"}