{"id":"1487072","content":"package ch.qos.logback.classic.net;\n\nimport ch.qos.logback.classic.LoggerContext;\nimport ch.qos.logback.classic.joran.JoranConfigurator;\nimport ch.qos.logback.core.joran.spi.JoranException;\nimport java.io.IOException;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.concurrent.CountDownLatch;\nimport javax.net.ServerSocketFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class SimpleSocketServer extends Thread {\n   Logger logger = LoggerFactory.getLogger(SimpleSocketServer.class);\n   private final int port;\n   private final LoggerContext lc;\n   private boolean closed = false;\n   private ServerSocket serverSocket;\n   private List<SocketNode> socketNodeList = new ArrayList();\n   private CountDownLatch latch;\n\n   public static void main(String[] argv) throws Exception {\n      doMain(SimpleSocketServer.class, argv);\n   }\n\n   protected static void doMain(Class<? extends SimpleSocketServer> serverClass, String[] argv) throws Exception {\n      int port = -1;\n      if (argv.length == 2) {\n         port = parsePortNumber(argv[0]);\n      } else {\n         usage(\"Wrong number of arguments.\");\n      }\n\n      String configFile = argv[1];\n      LoggerContext lc = (LoggerContext)LoggerFactory.getILoggerFactory();\n      configureLC(lc, configFile);\n      SimpleSocketServer sss = new SimpleSocketServer(lc, port);\n      sss.start();\n   }\n\n   public SimpleSocketServer(LoggerContext lc, int port) {\n      this.lc = lc;\n      this.port = port;\n   }\n\n   public void run() {\n      String oldThreadName = Thread.currentThread().getName();\n\n      try {\n         String newThreadName = this.getServerThreadName();\n         Thread.currentThread().setName(newThreadName);\n         this.logger.info(\"Listening on port \" + this.port);\n         this.serverSocket = this.getServerSocketFactory().createServerSocket(this.port);\n\n         while(!this.closed) {\n            this.logger.info(\"Waiting to accept a new client.\");\n            this.signalAlmostReadiness();\n            Socket socket = this.serverSocket.accept();\n            this.logger.info(\"Connected to client at \" + socket.getInetAddress());\n            this.logger.info(\"Starting new socket node.\");\n            SocketNode newSocketNode = new SocketNode(this, socket, this.lc);\n            List var5 = this.socketNodeList;\n            synchronized(this.socketNodeList) {\n               this.socketNodeList.add(newSocketNode);\n            }\n\n            String clientThreadName = this.getClientThreadName(socket);\n            (new Thread(newSocketNode, clientThreadName)).start();\n         }\n      } catch (Exception var12) {\n         if (this.closed) {\n            this.logger.info(\"Exception in run method for a closed server. This is normal.\");\n         } else {\n            this.logger.error(\"Unexpected failure in run method\", var12);\n         }\n      } finally {\n         Thread.currentThread().setName(oldThreadName);\n      }\n\n   }\n\n   protected String getServerThreadName() {\n      return String.format(\"Logback %s (port %d)\", this.getClass().getSimpleName(), this.port);\n   }\n\n   protected String getClientThreadName(Socket socket) {\n      return String.format(\"Logback SocketNode (client: %s)\", socket.getRemoteSocketAddress());\n   }\n\n   protected ServerSocketFactory getServerSocketFactory() {\n      return ServerSocketFactory.getDefault();\n   }\n\n   void signalAlmostReadiness() {\n      if (this.latch != null && this.latch.getCount() != 0L) {\n         this.latch.countDown();\n      }\n\n   }\n\n   void setLatch(CountDownLatch latch) {\n      this.latch = latch;\n   }\n\n   public CountDownLatch getLatch() {\n      return this.latch;\n   }\n\n   public boolean isClosed() {\n      return this.closed;\n   }\n\n   public void close() {\n      this.closed = true;\n      if (this.serverSocket != null) {\n         try {\n            this.serverSocket.close();\n         } catch (IOException var8) {\n            this.logger.error(\"Failed to close serverSocket\", var8);\n         } finally {\n            this.serverSocket = null;\n         }\n      }\n\n      this.logger.info(\"closing this server\");\n      List var1 = this.socketNodeList;\n      synchronized(this.socketNodeList) {\n         Iterator var2 = this.socketNodeList.iterator();\n\n         while(true) {\n            if (!var2.hasNext()) {\n               break;\n            }\n\n            SocketNode sn = (SocketNode)var2.next();\n            sn.close();\n         }\n      }\n\n      if (this.socketNodeList.size() != 0) {\n         this.logger.warn(\"Was expecting a 0-sized socketNodeList after server shutdown\");\n      }\n\n   }\n\n   public void socketNodeClosing(SocketNode sn) {\n      this.logger.debug(\"Removing {}\", sn);\n      List var2 = this.socketNodeList;\n      synchronized(this.socketNodeList) {\n         this.socketNodeList.remove(sn);\n      }\n   }\n\n   static void usage(String msg) {\n      System.err.println(msg);\n      System.err.println(\"Usage: java \" + SimpleSocketServer.class.getName() + \" port configFile\");\n      System.exit(1);\n   }\n\n   static int parsePortNumber(String portStr) {\n      try {\n         return Integer.parseInt(portStr);\n      } catch (NumberFormatException var2) {\n         var2.printStackTrace();\n         usage(\"Could not interpret port number [\" + portStr + \"].\");\n         return -1;\n      }\n   }\n\n   public static void configureLC(LoggerContext lc, String configFile) throws JoranException {\n      JoranConfigurator configurator = new JoranConfigurator();\n      lc.reset();\n      configurator.setContext(lc);\n      configurator.doConfigure(configFile);\n   }\n}\n"}