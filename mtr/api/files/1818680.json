{"id":"1818680","content":"package ch.qos.logback.core.joran.event.stax;\n\nimport ch.qos.logback.core.Context;\nimport ch.qos.logback.core.joran.spi.ElementPath;\nimport ch.qos.logback.core.joran.spi.JoranException;\nimport ch.qos.logback.core.spi.ContextAwareBase;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.xml.stream.XMLEventReader;\nimport javax.xml.stream.XMLInputFactory;\nimport javax.xml.stream.XMLStreamException;\nimport javax.xml.stream.events.Characters;\nimport javax.xml.stream.events.EndElement;\nimport javax.xml.stream.events.StartElement;\nimport javax.xml.stream.events.XMLEvent;\n\npublic class StaxEventRecorder extends ContextAwareBase {\n   List<StaxEvent> eventList = new ArrayList();\n   ElementPath globalElementPath = new ElementPath();\n\n   public StaxEventRecorder(Context context) {\n      this.setContext(context);\n   }\n\n   public void recordEvents(InputStream inputStream) throws JoranException {\n      try {\n         XMLEventReader xmlEventReader = XMLInputFactory.newInstance().createXMLEventReader(inputStream);\n         this.read(xmlEventReader);\n      } catch (XMLStreamException var3) {\n         throw new JoranException(\"Problem parsing XML document. See previously reported errors.\", var3);\n      }\n   }\n\n   public List<StaxEvent> getEventList() {\n      return this.eventList;\n   }\n\n   private void read(XMLEventReader xmlEventReader) throws XMLStreamException {\n      while(xmlEventReader.hasNext()) {\n         XMLEvent xmlEvent = xmlEventReader.nextEvent();\n         switch(xmlEvent.getEventType()) {\n         case 1:\n            this.addStartElement(xmlEvent);\n            break;\n         case 2:\n            this.addEndEvent(xmlEvent);\n         case 3:\n         default:\n            break;\n         case 4:\n            this.addCharacters(xmlEvent);\n         }\n      }\n\n   }\n\n   private void addStartElement(XMLEvent xmlEvent) {\n      StartElement se = xmlEvent.asStartElement();\n      String tagName = se.getName().getLocalPart();\n      this.globalElementPath.push(tagName);\n      ElementPath current = this.globalElementPath.duplicate();\n      StartEvent startEvent = new StartEvent(current, tagName, se.getAttributes(), se.getLocation());\n      this.eventList.add(startEvent);\n   }\n\n   private void addCharacters(XMLEvent xmlEvent) {\n      Characters characters = xmlEvent.asCharacters();\n      StaxEvent lastEvent = this.getLastEvent();\n      BodyEvent bodyEvent;\n      if (lastEvent instanceof BodyEvent) {\n         bodyEvent = (BodyEvent)lastEvent;\n         bodyEvent.append(characters.getData());\n      } else if (!characters.isWhiteSpace()) {\n         bodyEvent = new BodyEvent(characters.getData(), xmlEvent.getLocation());\n         this.eventList.add(bodyEvent);\n      }\n\n   }\n\n   private void addEndEvent(XMLEvent xmlEvent) {\n      EndElement ee = xmlEvent.asEndElement();\n      String tagName = ee.getName().getLocalPart();\n      EndEvent endEvent = new EndEvent(tagName, ee.getLocation());\n      this.eventList.add(endEvent);\n      this.globalElementPath.pop();\n   }\n\n   StaxEvent getLastEvent() {\n      if (this.eventList.isEmpty()) {\n         return null;\n      } else {\n         int size = this.eventList.size();\n         return size == 0 ? null : (StaxEvent)this.eventList.get(size - 1);\n      }\n   }\n}\n"}