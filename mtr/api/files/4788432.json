{"id":"4788432","content":"package org.springframework.aop.aspectj.annotation;\n\nimport java.io.Serializable;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.config.ConfigurableBeanFactory;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.OrderUtils;\nimport org.springframework.lang.Nullable;\nimport org.springframework.util.Assert;\nimport org.springframework.util.ClassUtils;\n\npublic class BeanFactoryAspectInstanceFactory implements MetadataAwareAspectInstanceFactory, Serializable {\n   private final BeanFactory beanFactory;\n   private final String name;\n   private final AspectMetadata aspectMetadata;\n\n   public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name) {\n      this(beanFactory, name, (Class)null);\n   }\n\n   public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, @Nullable Class<?> type) {\n      Assert.notNull(beanFactory, \"BeanFactory must not be null\");\n      Assert.notNull(name, \"Bean name must not be null\");\n      this.beanFactory = beanFactory;\n      this.name = name;\n      Class<?> resolvedType = type;\n      if (type == null) {\n         resolvedType = beanFactory.getType(name);\n         Assert.notNull(resolvedType, \"Unresolvable bean type - explicitly specify the aspect class\");\n      }\n\n      this.aspectMetadata = new AspectMetadata(resolvedType, name);\n   }\n\n   public Object getAspectInstance() {\n      return this.beanFactory.getBean(this.name);\n   }\n\n   @Nullable\n   public ClassLoader getAspectClassLoader() {\n      return this.beanFactory instanceof ConfigurableBeanFactory ? ((ConfigurableBeanFactory)this.beanFactory).getBeanClassLoader() : ClassUtils.getDefaultClassLoader();\n   }\n\n   public AspectMetadata getAspectMetadata() {\n      return this.aspectMetadata;\n   }\n\n   @Nullable\n   public Object getAspectCreationMutex() {\n      if (this.beanFactory.isSingleton(this.name)) {\n         return null;\n      } else {\n         return this.beanFactory instanceof ConfigurableBeanFactory ? ((ConfigurableBeanFactory)this.beanFactory).getSingletonMutex() : this;\n      }\n   }\n\n   public int getOrder() {\n      Class<?> type = this.beanFactory.getType(this.name);\n      if (type != null) {\n         return Ordered.class.isAssignableFrom(type) && this.beanFactory.isSingleton(this.name) ? ((Ordered)this.beanFactory.getBean(this.name)).getOrder() : OrderUtils.getOrder(type, Integer.MAX_VALUE);\n      } else {\n         return Integer.MAX_VALUE;\n      }\n   }\n\n   public String toString() {\n      return this.getClass().getSimpleName() + \": bean name '\" + this.name + \"'\";\n   }\n}\n"}