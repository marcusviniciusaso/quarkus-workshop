{"id":"1716272","content":"package org.springframework.boot.loader;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.JarURLConnection;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.net.URLConnection;\nimport java.security.AccessController;\nimport java.security.PrivilegedActionException;\nimport java.security.PrivilegedExceptionAction;\nimport java.util.Enumeration;\nimport java.util.function.Supplier;\nimport java.util.jar.JarFile;\nimport java.util.jar.Manifest;\nimport org.springframework.boot.loader.archive.Archive;\nimport org.springframework.boot.loader.jar.Handler;\n\npublic class LaunchedURLClassLoader extends URLClassLoader {\n   private static final int BUFFER_SIZE = 4096;\n   private final boolean exploded;\n   private final Archive rootArchive;\n   private final Object packageLock;\n   private volatile LaunchedURLClassLoader.DefinePackageCallType definePackageCallType;\n\n   public LaunchedURLClassLoader(URL[] urls, ClassLoader parent) {\n      this(false, urls, parent);\n   }\n\n   public LaunchedURLClassLoader(boolean exploded, URL[] urls, ClassLoader parent) {\n      this(exploded, (Archive)null, urls, parent);\n   }\n\n   public LaunchedURLClassLoader(boolean exploded, Archive rootArchive, URL[] urls, ClassLoader parent) {\n      super(urls, parent);\n      this.packageLock = new Object();\n      this.exploded = exploded;\n      this.rootArchive = rootArchive;\n   }\n\n   public URL findResource(String name) {\n      if (this.exploded) {\n         return super.findResource(name);\n      } else {\n         Handler.setUseFastConnectionExceptions(true);\n\n         URL var2;\n         try {\n            var2 = super.findResource(name);\n         } finally {\n            Handler.setUseFastConnectionExceptions(false);\n         }\n\n         return var2;\n      }\n   }\n\n   public Enumeration<URL> findResources(String name) throws IOException {\n      if (this.exploded) {\n         return super.findResources(name);\n      } else {\n         Handler.setUseFastConnectionExceptions(true);\n\n         LaunchedURLClassLoader.UseFastConnectionExceptionsEnumeration var2;\n         try {\n            var2 = new LaunchedURLClassLoader.UseFastConnectionExceptionsEnumeration(super.findResources(name));\n         } finally {\n            Handler.setUseFastConnectionExceptions(false);\n         }\n\n         return var2;\n      }\n   }\n\n   protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {\n      Class result;\n      if (name.startsWith(\"org.springframework.boot.loader.jarmode.\")) {\n         try {\n            result = this.loadClassInLaunchedClassLoader(name);\n            if (resolve) {\n               this.resolveClass(result);\n            }\n\n            return result;\n         } catch (ClassNotFoundException var10) {\n            ;\n         }\n      }\n\n      if (this.exploded) {\n         return super.loadClass(name, resolve);\n      } else {\n         Handler.setUseFastConnectionExceptions(true);\n\n         try {\n            try {\n               this.definePackageIfNecessary(name);\n            } catch (IllegalArgumentException var8) {\n               if (this.getPackage(name) == null) {\n                  throw new AssertionError(\"Package \" + name + \" has already been defined but it could not be found\");\n               }\n            }\n\n            result = super.loadClass(name, resolve);\n         } finally {\n            Handler.setUseFastConnectionExceptions(false);\n         }\n\n         return result;\n      }\n   }\n\n   private Class<?> loadClassInLaunchedClassLoader(String name) throws ClassNotFoundException {\n      String internalName = name.replace('.', '/') + \".class\";\n      InputStream inputStream = this.getParent().getResourceAsStream(internalName);\n      if (inputStream == null) {\n         throw new ClassNotFoundException(name);\n      } else {\n         try {\n            try {\n               ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n               byte[] buffer = new byte[4096];\n               boolean var6 = true;\n\n               int bytesRead;\n               while((bytesRead = inputStream.read(buffer)) != -1) {\n                  outputStream.write(buffer, 0, bytesRead);\n               }\n\n               inputStream.close();\n               byte[] bytes = outputStream.toByteArray();\n               Class<?> definedClass = this.defineClass(name, bytes, 0, bytes.length);\n               this.definePackageIfNecessary(name);\n               Class var9 = definedClass;\n               return var9;\n            } finally {\n               inputStream.close();\n            }\n         } catch (IOException var14) {\n            throw new ClassNotFoundException(\"Cannot load resource for class [\" + name + \"]\", var14);\n         }\n      }\n   }\n\n   private void definePackageIfNecessary(String className) {\n      int lastDot = className.lastIndexOf(46);\n      if (lastDot >= 0) {\n         String packageName = className.substring(0, lastDot);\n         if (this.getPackage(packageName) == null) {\n            try {\n               this.definePackage(className, packageName);\n            } catch (IllegalArgumentException var5) {\n               if (this.getPackage(packageName) == null) {\n                  throw new AssertionError(\"Package \" + packageName + \" has already been defined but it could not be found\");\n               }\n            }\n         }\n      }\n\n   }\n\n   private void definePackage(String className, String packageName) {\n      try {\n         AccessController.doPrivileged(() -> {\n            String packageEntryName = packageName.replace('.', '/') + \"/\";\n            String classEntryName = className.replace('.', '/') + \".class\";\n            URL[] var5 = this.getURLs();\n            int var6 = var5.length;\n\n            for(int var7 = 0; var7 < var6; ++var7) {\n               URL url = var5[var7];\n\n               try {\n                  URLConnection connection = url.openConnection();\n                  if (connection instanceof JarURLConnection) {\n                     JarFile jarFile = ((JarURLConnection)connection).getJarFile();\n                     if (jarFile.getEntry(classEntryName) != null && jarFile.getEntry(packageEntryName) != null && jarFile.getManifest() != null) {\n                        this.definePackage(packageName, jarFile.getManifest(), url);\n                        return null;\n                     }\n                  }\n               } catch (IOException var11) {\n                  ;\n               }\n            }\n\n            return null;\n         }, AccessController.getContext());\n      } catch (PrivilegedActionException var4) {\n         ;\n      }\n\n   }\n\n   protected Package definePackage(String name, Manifest man, URL url) throws IllegalArgumentException {\n      if (!this.exploded) {\n         return super.definePackage(name, man, url);\n      } else {\n         Object var4 = this.packageLock;\n         synchronized(this.packageLock) {\n            return (Package)this.doDefinePackage(LaunchedURLClassLoader.DefinePackageCallType.MANIFEST, () -> {\n               return super.definePackage(name, man, url);\n            });\n         }\n      }\n   }\n\n   protected Package definePackage(String name, String specTitle, String specVersion, String specVendor, String implTitle, String implVersion, String implVendor, URL sealBase) throws IllegalArgumentException {\n      if (!this.exploded) {\n         return super.definePackage(name, specTitle, specVersion, specVendor, implTitle, implVersion, implVendor, sealBase);\n      } else {\n         Object var9 = this.packageLock;\n         synchronized(this.packageLock) {\n            if (this.definePackageCallType == null) {\n               Manifest manifest = this.getManifest(this.rootArchive);\n               if (manifest != null) {\n                  return this.definePackage(name, manifest, sealBase);\n               }\n            }\n\n            return (Package)this.doDefinePackage(LaunchedURLClassLoader.DefinePackageCallType.ATTRIBUTES, () -> {\n               return super.definePackage(name, specTitle, specVersion, specVendor, implTitle, implVersion, implVendor, sealBase);\n            });\n         }\n      }\n   }\n\n   private Manifest getManifest(Archive archive) {\n      try {\n         return archive != null ? archive.getManifest() : null;\n      } catch (IOException var3) {\n         return null;\n      }\n   }\n\n   private <T> T doDefinePackage(LaunchedURLClassLoader.DefinePackageCallType type, Supplier<T> call) {\n      LaunchedURLClassLoader.DefinePackageCallType existingType = this.definePackageCallType;\n\n      Object var4;\n      try {\n         this.definePackageCallType = type;\n         var4 = call.get();\n      } finally {\n         this.definePackageCallType = existingType;\n      }\n\n      return var4;\n   }\n\n   public void clearCache() {\n      if (!this.exploded) {\n         URL[] var1 = this.getURLs();\n         int var2 = var1.length;\n\n         for(int var3 = 0; var3 < var2; ++var3) {\n            URL url = var1[var3];\n\n            try {\n               URLConnection connection = url.openConnection();\n               if (connection instanceof JarURLConnection) {\n                  this.clearCache(connection);\n               }\n            } catch (IOException var6) {\n               ;\n            }\n         }\n\n      }\n   }\n\n   private void clearCache(URLConnection connection) throws IOException {\n      Object jarFile = ((JarURLConnection)connection).getJarFile();\n      if (jarFile instanceof org.springframework.boot.loader.jar.JarFile) {\n         ((org.springframework.boot.loader.jar.JarFile)jarFile).clearCache();\n      }\n\n   }\n\n   static {\n      ClassLoader.registerAsParallelCapable();\n   }\n\n   private static enum DefinePackageCallType {\n      MANIFEST,\n      ATTRIBUTES;\n   }\n\n   private static class UseFastConnectionExceptionsEnumeration implements Enumeration<URL> {\n      private final Enumeration<URL> delegate;\n\n      UseFastConnectionExceptionsEnumeration(Enumeration<URL> delegate) {\n         this.delegate = delegate;\n      }\n\n      public boolean hasMoreElements() {\n         Handler.setUseFastConnectionExceptions(true);\n\n         boolean var1;\n         try {\n            var1 = this.delegate.hasMoreElements();\n         } finally {\n            Handler.setUseFastConnectionExceptions(false);\n         }\n\n         return var1;\n      }\n\n      public URL nextElement() {\n         Handler.setUseFastConnectionExceptions(true);\n\n         URL var1;\n         try {\n            var1 = (URL)this.delegate.nextElement();\n         } finally {\n            Handler.setUseFastConnectionExceptions(false);\n         }\n\n         return var1;\n      }\n   }\n}\n"}