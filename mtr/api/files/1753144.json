{"id":"1753144","content":"package org.springframework.boot.loader.jar;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.security.Permission;\nimport java.util.Enumeration;\nimport java.util.jar.JarEntry;\nimport java.util.jar.Manifest;\nimport java.util.stream.Stream;\nimport java.util.zip.ZipEntry;\nimport org.springframework.boot.loader.jar.AbstractJarFile.JarFileType;\n\nclass JarFileWrapper extends AbstractJarFile {\n   private final JarFile parent;\n\n   JarFileWrapper(JarFile parent) throws IOException {\n      super(parent.getRootJarFile().getFile());\n      this.parent = parent;\n      if (System.getSecurityManager() == null) {\n         super.close();\n      }\n\n   }\n\n   URL getUrl() throws MalformedURLException {\n      return this.parent.getUrl();\n   }\n\n   JarFileType getType() {\n      return this.parent.getType();\n   }\n\n   Permission getPermission() {\n      return this.parent.getPermission();\n   }\n\n   public Manifest getManifest() throws IOException {\n      return this.parent.getManifest();\n   }\n\n   public Enumeration<JarEntry> entries() {\n      return this.parent.entries();\n   }\n\n   public Stream<JarEntry> stream() {\n      return this.parent.stream();\n   }\n\n   public JarEntry getJarEntry(String name) {\n      return this.parent.getJarEntry(name);\n   }\n\n   public ZipEntry getEntry(String name) {\n      return this.parent.getEntry(name);\n   }\n\n   InputStream getInputStream() throws IOException {\n      return this.parent.getInputStream();\n   }\n\n   public synchronized InputStream getInputStream(ZipEntry ze) throws IOException {\n      return this.parent.getInputStream(ze);\n   }\n\n   public String getComment() {\n      return this.parent.getComment();\n   }\n\n   public int size() {\n      return this.parent.size();\n   }\n\n   public String toString() {\n      return this.parent.toString();\n   }\n\n   public String getName() {\n      return this.parent.getName();\n   }\n\n   static JarFile unwrap(java.util.jar.JarFile jarFile) {\n      if (jarFile instanceof JarFile) {\n         return (JarFile)jarFile;\n      } else if (jarFile instanceof JarFileWrapper) {\n         return unwrap(((JarFileWrapper)jarFile).parent);\n      } else {\n         throw new IllegalStateException(\"Not a JarFile or Wrapper\");\n      }\n   }\n}\n"}