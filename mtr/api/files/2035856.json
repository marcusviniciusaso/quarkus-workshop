{"id":"2035856","content":"package org.springframework.boot.loader;\n\nimport java.io.File;\nimport java.net.URI;\nimport java.net.URL;\nimport java.security.CodeSource;\nimport java.security.ProtectionDomain;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.springframework.boot.loader.archive.Archive;\nimport org.springframework.boot.loader.archive.ExplodedArchive;\nimport org.springframework.boot.loader.archive.JarFileArchive;\nimport org.springframework.boot.loader.jar.JarFile;\n\npublic abstract class Launcher {\n   private static final String JAR_MODE_LAUNCHER = \"org.springframework.boot.loader.jarmode.JarModeLauncher\";\n\n   protected void launch(String[] args) throws Exception {\n      if (!this.isExploded()) {\n         JarFile.registerUrlProtocolHandler();\n      }\n\n      ClassLoader classLoader = this.createClassLoader(this.getClassPathArchivesIterator());\n      String jarMode = System.getProperty(\"jarmode\");\n      String launchClass = jarMode != null && !jarMode.isEmpty() ? \"org.springframework.boot.loader.jarmode.JarModeLauncher\" : this.getMainClass();\n      this.launch(args, launchClass, classLoader);\n   }\n\n   /** @deprecated */\n   @Deprecated\n   protected ClassLoader createClassLoader(List<Archive> archives) throws Exception {\n      return this.createClassLoader(archives.iterator());\n   }\n\n   protected ClassLoader createClassLoader(Iterator<Archive> archives) throws Exception {\n      ArrayList urls = new ArrayList(50);\n\n      while(archives.hasNext()) {\n         urls.add(((Archive)archives.next()).getUrl());\n      }\n\n      return this.createClassLoader((URL[])urls.toArray(new URL[0]));\n   }\n\n   protected ClassLoader createClassLoader(URL[] urls) throws Exception {\n      return new LaunchedURLClassLoader(this.isExploded(), this.getArchive(), urls, this.getClass().getClassLoader());\n   }\n\n   protected void launch(String[] args, String launchClass, ClassLoader classLoader) throws Exception {\n      Thread.currentThread().setContextClassLoader(classLoader);\n      this.createMainMethodRunner(launchClass, args, classLoader).run();\n   }\n\n   protected MainMethodRunner createMainMethodRunner(String mainClass, String[] args, ClassLoader classLoader) {\n      return new MainMethodRunner(mainClass, args);\n   }\n\n   protected abstract String getMainClass() throws Exception;\n\n   protected Iterator<Archive> getClassPathArchivesIterator() throws Exception {\n      return this.getClassPathArchives().iterator();\n   }\n\n   /** @deprecated */\n   @Deprecated\n   protected List<Archive> getClassPathArchives() throws Exception {\n      throw new IllegalStateException(\"Unexpected call to getClassPathArchives()\");\n   }\n\n   protected final Archive createArchive() throws Exception {\n      ProtectionDomain protectionDomain = this.getClass().getProtectionDomain();\n      CodeSource codeSource = protectionDomain.getCodeSource();\n      URI location = codeSource != null ? codeSource.getLocation().toURI() : null;\n      String path = location != null ? location.getSchemeSpecificPart() : null;\n      if (path == null) {\n         throw new IllegalStateException(\"Unable to determine code source archive\");\n      } else {\n         File root = new File(path);\n         if (!root.exists()) {\n            throw new IllegalStateException(\"Unable to determine code source archive from \" + root);\n         } else {\n            return (Archive)(root.isDirectory() ? new ExplodedArchive(root) : new JarFileArchive(root));\n         }\n      }\n   }\n\n   protected boolean isExploded() {\n      return false;\n   }\n\n   protected Archive getArchive() {\n      return null;\n   }\n}\n"}