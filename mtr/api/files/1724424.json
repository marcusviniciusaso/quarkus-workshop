{"id":"1724424","content":"package org.springdoc.webmvc.api;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport io.swagger.v3.oas.annotations.Operation;\nimport java.util.Locale;\nimport java.util.Optional;\nimport javax.servlet.http.HttpServletRequest;\nimport org.springdoc.core.AbstractRequestService;\nimport org.springdoc.core.GenericResponseService;\nimport org.springdoc.core.OpenAPIService;\nimport org.springdoc.core.OperationService;\nimport org.springdoc.core.SpringDocConfigProperties;\nimport org.springdoc.core.SpringDocProviders;\nimport org.springdoc.core.customizers.SpringDocCustomizers;\nimport org.springdoc.core.providers.SpringWebProvider;\nimport org.springframework.beans.factory.ObjectFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@ConditionalOnProperty(\n   name = {\"springdoc.enable-default-api-docs\"},\n   havingValue = \"true\",\n   matchIfMissing = true\n)\npublic class OpenApiWebMvcResource extends OpenApiResource {\n   public OpenApiWebMvcResource(String groupName, ObjectFactory<OpenAPIService> openAPIBuilderObjectFactory, AbstractRequestService requestBuilder, GenericResponseService responseBuilder, OperationService operationParser, SpringDocConfigProperties springDocConfigProperties, SpringDocProviders springDocProviders, SpringDocCustomizers springDocCustomizers) {\n      super(groupName, openAPIBuilderObjectFactory, requestBuilder, responseBuilder, operationParser, springDocConfigProperties, springDocProviders, springDocCustomizers);\n   }\n\n   @Autowired\n   public OpenApiWebMvcResource(ObjectFactory<OpenAPIService> openAPIBuilderObjectFactory, AbstractRequestService requestBuilder, GenericResponseService responseBuilder, OperationService operationParser, SpringDocConfigProperties springDocConfigProperties, SpringDocProviders springDocProviders, SpringDocCustomizers springDocCustomizers) {\n      super(openAPIBuilderObjectFactory, requestBuilder, responseBuilder, operationParser, springDocConfigProperties, springDocProviders, springDocCustomizers);\n   }\n\n   @Operation(\n      hidden = true\n   )\n   @GetMapping(\n      value = {\"${springdoc.api-docs.path:#{T(org.springdoc.core.Constants).DEFAULT_API_DOCS_URL}}\"},\n      produces = {\"application/json\"}\n   )\n   public byte[] openapiJson(HttpServletRequest request, @Value(\"${springdoc.api-docs.path:#{T(org.springdoc.core.Constants).DEFAULT_API_DOCS_URL}}\") String apiDocsUrl, Locale locale) throws JsonProcessingException {\n      return super.openapiJson(request, apiDocsUrl, locale);\n   }\n\n   @Operation(\n      hidden = true\n   )\n   @GetMapping(\n      value = {\"${springdoc.api-docs.path:#{T(org.springdoc.core.Constants).DEFAULT_API_DOCS_URL}}.yaml\"},\n      produces = {\"application/vnd.oai.openapi\"}\n   )\n   public byte[] openapiYaml(HttpServletRequest request, @Value(\"${springdoc.api-docs.path:#{T(org.springdoc.core.Constants).DEFAULT_API_DOCS_URL}}.yaml\") String apiDocsUrl, Locale locale) throws JsonProcessingException {\n      return super.openapiYaml(request, apiDocsUrl, locale);\n   }\n\n   protected String getServerUrl(HttpServletRequest request, String apiDocsUrl) {\n      String requestUrl = this.decode(request.getRequestURL().toString());\n      Optional<SpringWebProvider> springWebProviderOptional = this.springDocProviders.getSpringWebProvider();\n      String prefix = \"\";\n      if (springWebProviderOptional.isPresent()) {\n         prefix = ((SpringWebProvider)springWebProviderOptional.get()).findPathPrefix(this.springDocConfigProperties);\n      }\n\n      return requestUrl.substring(0, requestUrl.length() - apiDocsUrl.length() - prefix.length());\n   }\n}\n"}