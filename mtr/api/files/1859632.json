{"id":"1859632","content":"package ch.qos.logback.core.util;\n\nimport ch.qos.logback.core.Context;\nimport ch.qos.logback.core.rolling.RolloverFailure;\nimport ch.qos.logback.core.spi.ContextAwareBase;\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.net.URLConnection;\n\npublic class FileUtil extends ContextAwareBase {\n   static final int BUF_SIZE = 32768;\n\n   public FileUtil(Context context) {\n      this.setContext(context);\n   }\n\n   public static URL fileToURL(File file) {\n      try {\n         return file.toURI().toURL();\n      } catch (MalformedURLException var2) {\n         throw new RuntimeException(\"Unexpected exception on file [\" + file + \"]\", var2);\n      }\n   }\n\n   public static boolean createMissingParentDirectories(File file) {\n      File parent = file.getParentFile();\n      if (parent == null) {\n         return true;\n      } else {\n         parent.mkdirs();\n         return parent.exists();\n      }\n   }\n\n   public String resourceAsString(ClassLoader classLoader, String resourceName) {\n      URL url = classLoader.getResource(resourceName);\n      if (url == null) {\n         this.addError(\"Failed to find resource [\" + resourceName + \"]\");\n         return null;\n      } else {\n         InputStreamReader isr = null;\n\n         try {\n            URLConnection urlConnection = url.openConnection();\n            urlConnection.setUseCaches(false);\n            isr = new InputStreamReader(urlConnection.getInputStream());\n            char[] buf = new char[128];\n            StringBuilder builder = new StringBuilder();\n            boolean var8 = true;\n\n            int count;\n            while((count = isr.read(buf, 0, buf.length)) != -1) {\n               builder.append(buf, 0, count);\n            }\n\n            String var9 = builder.toString();\n            return var9;\n         } catch (IOException var19) {\n            this.addError(\"Failed to open \" + resourceName, var19);\n         } finally {\n            if (isr != null) {\n               try {\n                  isr.close();\n               } catch (IOException var18) {\n                  ;\n               }\n            }\n\n         }\n\n         return null;\n      }\n   }\n\n   public void copy(String src, String destination) throws RolloverFailure {\n      BufferedInputStream bis = null;\n      BufferedOutputStream bos = null;\n\n      try {\n         bis = new BufferedInputStream(new FileInputStream(src));\n         bos = new BufferedOutputStream(new FileOutputStream(destination));\n         byte[] inbuf = new byte['è€€'];\n\n         int n;\n         while((n = bis.read(inbuf)) != -1) {\n            bos.write(inbuf, 0, n);\n         }\n\n         bis.close();\n         bis = null;\n         bos.close();\n         bos = null;\n      } catch (IOException var17) {\n         String msg = \"Failed to copy [\" + src + \"] to [\" + destination + \"]\";\n         this.addError(msg, var17);\n         throw new RolloverFailure(msg);\n      } finally {\n         if (bis != null) {\n            try {\n               bis.close();\n            } catch (IOException var16) {\n               ;\n            }\n         }\n\n         if (bos != null) {\n            try {\n               bos.close();\n            } catch (IOException var15) {\n               ;\n            }\n         }\n\n      }\n   }\n}\n"}