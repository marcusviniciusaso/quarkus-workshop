{"id":"1818664","content":"package ch.qos.logback.core.rolling.helper;\n\nimport ch.qos.logback.core.rolling.RolloverFailure;\nimport ch.qos.logback.core.spi.ContextAwareBase;\nimport ch.qos.logback.core.status.ErrorStatus;\nimport ch.qos.logback.core.status.WarnStatus;\nimport ch.qos.logback.core.util.FileUtil;\nimport java.io.BufferedInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Future;\nimport java.util.zip.GZIPOutputStream;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipOutputStream;\n\npublic class Compressor extends ContextAwareBase {\n   final CompressionMode compressionMode;\n   static final int BUFFER_SIZE = 8192;\n\n   public Compressor(CompressionMode compressionMode) {\n      this.compressionMode = compressionMode;\n   }\n\n   public void compress(String nameOfFile2Compress, String nameOfCompressedFile, String innerEntryName) {\n      switch(this.compressionMode) {\n      case GZ:\n         this.gzCompress(nameOfFile2Compress, nameOfCompressedFile);\n         break;\n      case ZIP:\n         this.zipCompress(nameOfFile2Compress, nameOfCompressedFile, innerEntryName);\n         break;\n      case NONE:\n         throw new UnsupportedOperationException(\"compress method called in NONE compression mode\");\n      }\n\n   }\n\n   private void zipCompress(String nameOfFile2zip, String nameOfZippedFile, String innerEntryName) {\n      File file2zip = new File(nameOfFile2zip);\n      if (!file2zip.exists()) {\n         this.addStatus(new WarnStatus(\"The file to compress named [\" + nameOfFile2zip + \"] does not exist.\", this));\n      } else if (innerEntryName == null) {\n         this.addStatus(new WarnStatus(\"The innerEntryName parameter cannot be null\", this));\n      } else {\n         if (!nameOfZippedFile.endsWith(\".zip\")) {\n            nameOfZippedFile = nameOfZippedFile + \".zip\";\n         }\n\n         File zippedFile = new File(nameOfZippedFile);\n         if (zippedFile.exists()) {\n            this.addStatus(new WarnStatus(\"The target compressed file named [\" + nameOfZippedFile + \"] exist already.\", this));\n         } else {\n            this.addInfo(\"ZIP compressing [\" + file2zip + \"] as [\" + zippedFile + \"]\");\n            this.createMissingTargetDirsIfNecessary(zippedFile);\n            BufferedInputStream bis = null;\n            ZipOutputStream zos = null;\n\n            try {\n               bis = new BufferedInputStream(new FileInputStream(nameOfFile2zip));\n               zos = new ZipOutputStream(new FileOutputStream(nameOfZippedFile));\n               ZipEntry zipEntry = this.computeZipEntry(innerEntryName);\n               zos.putNextEntry(zipEntry);\n               byte[] inbuf = new byte[8192];\n\n               int n;\n               while((n = bis.read(inbuf)) != -1) {\n                  zos.write(inbuf, 0, n);\n               }\n\n               bis.close();\n               bis = null;\n               zos.close();\n               zos = null;\n               if (!file2zip.delete()) {\n                  this.addStatus(new WarnStatus(\"Could not delete [\" + nameOfFile2zip + \"].\", this));\n               }\n            } catch (Exception var23) {\n               this.addStatus(new ErrorStatus(\"Error occurred while compressing [\" + nameOfFile2zip + \"] into [\" + nameOfZippedFile + \"].\", this, var23));\n            } finally {\n               if (bis != null) {\n                  try {\n                     bis.close();\n                  } catch (IOException var22) {\n                     ;\n                  }\n               }\n\n               if (zos != null) {\n                  try {\n                     zos.close();\n                  } catch (IOException var21) {\n                     ;\n                  }\n               }\n\n            }\n\n         }\n      }\n   }\n\n   ZipEntry computeZipEntry(File zippedFile) {\n      return this.computeZipEntry(zippedFile.getName());\n   }\n\n   ZipEntry computeZipEntry(String filename) {\n      String nameOfFileNestedWithinArchive = computeFileNameStrWithoutCompSuffix(filename, this.compressionMode);\n      return new ZipEntry(nameOfFileNestedWithinArchive);\n   }\n\n   private void gzCompress(String nameOfFile2gz, String nameOfgzedFile) {\n      File file2gz = new File(nameOfFile2gz);\n      if (!file2gz.exists()) {\n         this.addStatus(new WarnStatus(\"The file to compress named [\" + nameOfFile2gz + \"] does not exist.\", this));\n      } else {\n         if (!nameOfgzedFile.endsWith(\".gz\")) {\n            nameOfgzedFile = nameOfgzedFile + \".gz\";\n         }\n\n         File gzedFile = new File(nameOfgzedFile);\n         if (gzedFile.exists()) {\n            this.addWarn(\"The target compressed file named [\" + nameOfgzedFile + \"] exist already. Aborting file compression.\");\n         } else {\n            this.addInfo(\"GZ compressing [\" + file2gz + \"] as [\" + gzedFile + \"]\");\n            this.createMissingTargetDirsIfNecessary(gzedFile);\n            BufferedInputStream bis = null;\n            GZIPOutputStream gzos = null;\n\n            try {\n               bis = new BufferedInputStream(new FileInputStream(nameOfFile2gz));\n               gzos = new GZIPOutputStream(new FileOutputStream(nameOfgzedFile));\n               byte[] inbuf = new byte[8192];\n\n               int n;\n               while((n = bis.read(inbuf)) != -1) {\n                  gzos.write(inbuf, 0, n);\n               }\n\n               bis.close();\n               bis = null;\n               gzos.close();\n               gzos = null;\n               if (!file2gz.delete()) {\n                  this.addStatus(new WarnStatus(\"Could not delete [\" + nameOfFile2gz + \"].\", this));\n               }\n            } catch (Exception var21) {\n               this.addStatus(new ErrorStatus(\"Error occurred while compressing [\" + nameOfFile2gz + \"] into [\" + nameOfgzedFile + \"].\", this, var21));\n            } finally {\n               if (bis != null) {\n                  try {\n                     bis.close();\n                  } catch (IOException var20) {\n                     ;\n                  }\n               }\n\n               if (gzos != null) {\n                  try {\n                     gzos.close();\n                  } catch (IOException var19) {\n                     ;\n                  }\n               }\n\n            }\n\n         }\n      }\n   }\n\n   public static String computeFileNameStrWithoutCompSuffix(String fileNamePatternStr, CompressionMode compressionMode) {\n      int len = fileNamePatternStr.length();\n      switch(compressionMode) {\n      case GZ:\n         if (fileNamePatternStr.endsWith(\".gz\")) {\n            return fileNamePatternStr.substring(0, len - 3);\n         }\n\n         return fileNamePatternStr;\n      case ZIP:\n         if (fileNamePatternStr.endsWith(\".zip\")) {\n            return fileNamePatternStr.substring(0, len - 4);\n         }\n\n         return fileNamePatternStr;\n      case NONE:\n         return fileNamePatternStr;\n      default:\n         throw new IllegalStateException(\"Execution should not reach this point\");\n      }\n   }\n\n   void createMissingTargetDirsIfNecessary(File file) {\n      boolean result = FileUtil.createMissingParentDirectories(file);\n      if (!result) {\n         this.addError(\"Failed to create parent directories for [\" + file.getAbsolutePath() + \"]\");\n      }\n\n   }\n\n   public String toString() {\n      return this.getClass().getName();\n   }\n\n   public Future<?> asyncCompress(String nameOfFile2Compress, String nameOfCompressedFile, String innerEntryName) throws RolloverFailure {\n      Compressor.CompressionRunnable runnable = new Compressor.CompressionRunnable(nameOfFile2Compress, nameOfCompressedFile, innerEntryName);\n      ExecutorService executorService = this.context.getScheduledExecutorService();\n      Future<?> future = executorService.submit(runnable);\n      return future;\n   }\n\n   class CompressionRunnable implements Runnable {\n      final String nameOfFile2Compress;\n      final String nameOfCompressedFile;\n      final String innerEntryName;\n\n      public CompressionRunnable(String nameOfFile2Compress, String nameOfCompressedFile, String innerEntryName) {\n         this.nameOfFile2Compress = nameOfFile2Compress;\n         this.nameOfCompressedFile = nameOfCompressedFile;\n         this.innerEntryName = innerEntryName;\n      }\n\n      public void run() {\n         Compressor.this.compress(this.nameOfFile2Compress, this.nameOfCompressedFile, this.innerEntryName);\n      }\n   }\n}\n"}