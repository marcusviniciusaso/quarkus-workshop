{"id":"6422736","content":"package org.springframework.aop.framework;\n\nimport java.io.Closeable;\nimport org.springframework.beans.factory.Aware;\nimport org.springframework.beans.factory.BeanClassLoaderAware;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.core.Ordered;\nimport org.springframework.lang.Nullable;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.ObjectUtils;\n\npublic class ProxyProcessorSupport extends ProxyConfig implements Ordered, BeanClassLoaderAware, AopInfrastructureBean {\n   private int order = Integer.MAX_VALUE;\n   @Nullable\n   private ClassLoader proxyClassLoader = ClassUtils.getDefaultClassLoader();\n   private boolean classLoaderConfigured = false;\n\n   public void setOrder(int order) {\n      this.order = order;\n   }\n\n   public int getOrder() {\n      return this.order;\n   }\n\n   public void setProxyClassLoader(@Nullable ClassLoader classLoader) {\n      this.proxyClassLoader = classLoader;\n      this.classLoaderConfigured = classLoader != null;\n   }\n\n   @Nullable\n   protected ClassLoader getProxyClassLoader() {\n      return this.proxyClassLoader;\n   }\n\n   public void setBeanClassLoader(ClassLoader classLoader) {\n      if (!this.classLoaderConfigured) {\n         this.proxyClassLoader = classLoader;\n      }\n\n   }\n\n   protected void evaluateProxyInterfaces(Class<?> beanClass, ProxyFactory proxyFactory) {\n      Class<?>[] targetInterfaces = ClassUtils.getAllInterfacesForClass(beanClass, this.getProxyClassLoader());\n      boolean hasReasonableProxyInterface = false;\n      Class[] var5 = targetInterfaces;\n      int var6 = targetInterfaces.length;\n\n      int var7;\n      Class ifc;\n      for(var7 = 0; var7 < var6; ++var7) {\n         ifc = var5[var7];\n         if (!this.isConfigurationCallbackInterface(ifc) && !this.isInternalLanguageInterface(ifc) && ifc.getMethods().length > 0) {\n            hasReasonableProxyInterface = true;\n            break;\n         }\n      }\n\n      if (hasReasonableProxyInterface) {\n         var5 = targetInterfaces;\n         var6 = targetInterfaces.length;\n\n         for(var7 = 0; var7 < var6; ++var7) {\n            ifc = var5[var7];\n            proxyFactory.addInterface(ifc);\n         }\n      } else {\n         proxyFactory.setProxyTargetClass(true);\n      }\n\n   }\n\n   protected boolean isConfigurationCallbackInterface(Class<?> ifc) {\n      return InitializingBean.class == ifc || DisposableBean.class == ifc || Closeable.class == ifc || AutoCloseable.class == ifc || ObjectUtils.containsElement(ifc.getInterfaces(), Aware.class);\n   }\n\n   protected boolean isInternalLanguageInterface(Class<?> ifc) {\n      return ifc.getName().equals(\"groovy.lang.GroovyObject\") || ifc.getName().endsWith(\".cglib.proxy.Factory\") || ifc.getName().endsWith(\".bytebuddy.MockAccess\");\n   }\n}\n"}