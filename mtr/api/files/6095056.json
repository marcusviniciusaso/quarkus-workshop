{"id":"6095056","content":"package org.springframework.aop.aspectj.annotation;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.function.Function;\nimport org.aspectj.lang.reflect.PerClauseKind;\nimport org.springframework.aop.Advisor;\nimport org.springframework.aop.aspectj.AspectJProxyUtils;\nimport org.springframework.aop.aspectj.SimpleAspectInstanceFactory;\nimport org.springframework.aop.framework.ProxyCreatorSupport;\nimport org.springframework.aop.support.AopUtils;\nimport org.springframework.core.annotation.AnnotationAwareOrderComparator;\nimport org.springframework.util.Assert;\nimport org.springframework.util.ClassUtils;\n\npublic class AspectJProxyFactory extends ProxyCreatorSupport {\n   private static final Map<Class<?>, Object> aspectCache = new ConcurrentHashMap();\n   private final AspectJAdvisorFactory aspectFactory = new ReflectiveAspectJAdvisorFactory();\n\n   public AspectJProxyFactory() {\n   }\n\n   public AspectJProxyFactory(Object target) {\n      Assert.notNull(target, \"Target object must not be null\");\n      this.setInterfaces(ClassUtils.getAllInterfaces(target));\n      this.setTarget(target);\n   }\n\n   public AspectJProxyFactory(Class... interfaces) {\n      this.setInterfaces(interfaces);\n   }\n\n   public void addAspect(Object aspectInstance) {\n      Class<?> aspectClass = aspectInstance.getClass();\n      String aspectName = aspectClass.getName();\n      AspectMetadata am = this.createAspectMetadata(aspectClass, aspectName);\n      if (am.getAjType().getPerClause().getKind() != PerClauseKind.SINGLETON) {\n         throw new IllegalArgumentException(\"Aspect class [\" + aspectClass.getName() + \"] does not define a singleton aspect\");\n      } else {\n         this.addAdvisorsFromAspectInstanceFactory(new SingletonMetadataAwareAspectInstanceFactory(aspectInstance, aspectName));\n      }\n   }\n\n   public void addAspect(Class<?> aspectClass) {\n      String aspectName = aspectClass.getName();\n      AspectMetadata am = this.createAspectMetadata(aspectClass, aspectName);\n      MetadataAwareAspectInstanceFactory instanceFactory = this.createAspectInstanceFactory(am, aspectClass, aspectName);\n      this.addAdvisorsFromAspectInstanceFactory(instanceFactory);\n   }\n\n   private void addAdvisorsFromAspectInstanceFactory(MetadataAwareAspectInstanceFactory instanceFactory) {\n      List<Advisor> advisors = this.aspectFactory.getAdvisors(instanceFactory);\n      Class<?> targetClass = this.getTargetClass();\n      Assert.state(targetClass != null, \"Unresolvable target class\");\n      advisors = AopUtils.findAdvisorsThatCanApply(advisors, targetClass);\n      AspectJProxyUtils.makeAdvisorChainAspectJCapableIfNecessary(advisors);\n      AnnotationAwareOrderComparator.sort(advisors);\n      this.addAdvisors(advisors);\n   }\n\n   private AspectMetadata createAspectMetadata(Class<?> aspectClass, String aspectName) {\n      AspectMetadata am = new AspectMetadata(aspectClass, aspectName);\n      if (!am.getAjType().isAspect()) {\n         throw new IllegalArgumentException(\"Class [\" + aspectClass.getName() + \"] is not a valid aspect type\");\n      } else {\n         return am;\n      }\n   }\n\n   private MetadataAwareAspectInstanceFactory createAspectInstanceFactory(AspectMetadata am, Class<?> aspectClass, String aspectName) {\n      Object instanceFactory;\n      if (am.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) {\n         Object instance = this.getSingletonAspectInstance(aspectClass);\n         instanceFactory = new SingletonMetadataAwareAspectInstanceFactory(instance, aspectName);\n      } else {\n         instanceFactory = new SimpleMetadataAwareAspectInstanceFactory(aspectClass, aspectName);\n      }\n\n      return (MetadataAwareAspectInstanceFactory)instanceFactory;\n   }\n\n   private Object getSingletonAspectInstance(Class<?> aspectClass) {\n      return aspectCache.computeIfAbsent(aspectClass, (clazz) -> {\n         return (new SimpleAspectInstanceFactory(clazz)).getAspectInstance();\n      });\n   }\n\n   public <T> T getProxy() {\n      return this.createAopProxy().getProxy();\n   }\n\n   public <T> T getProxy(ClassLoader classLoader) {\n      return this.createAopProxy().getProxy(classLoader);\n   }\n}\n"}