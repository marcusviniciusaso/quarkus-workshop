{"id":"5484752","content":"package org.springframework.aop.framework.autoproxy;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Proxy;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.ConcurrentHashMap;\nimport org.aopalliance.aop.Advice;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.aop.Advisor;\nimport org.springframework.aop.Pointcut;\nimport org.springframework.aop.TargetSource;\nimport org.springframework.aop.framework.AopInfrastructureBean;\nimport org.springframework.aop.framework.ProxyFactory;\nimport org.springframework.aop.framework.ProxyProcessorSupport;\nimport org.springframework.aop.framework.adapter.AdvisorAdapterRegistry;\nimport org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;\nimport org.springframework.aop.target.SingletonTargetSource;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.PropertyValues;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.FactoryBean;\nimport org.springframework.beans.factory.config.ConfigurableBeanFactory;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor;\nimport org.springframework.core.SmartClassLoader;\nimport org.springframework.lang.Nullable;\nimport org.springframework.util.Assert;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.StringUtils;\n\npublic abstract class AbstractAutoProxyCreator extends ProxyProcessorSupport implements SmartInstantiationAwareBeanPostProcessor, BeanFactoryAware {\n   @Nullable\n   protected static final Object[] DO_NOT_PROXY = null;\n   protected static final Object[] PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS = new Object[0];\n   protected final Log logger = LogFactory.getLog(this.getClass());\n   private AdvisorAdapterRegistry advisorAdapterRegistry = GlobalAdvisorAdapterRegistry.getInstance();\n   private boolean freezeProxy = false;\n   private String[] interceptorNames = new String[0];\n   private boolean applyCommonInterceptorsFirst = true;\n   @Nullable\n   private TargetSourceCreator[] customTargetSourceCreators;\n   @Nullable\n   private BeanFactory beanFactory;\n   private final Set<String> targetSourcedBeans = Collections.newSetFromMap(new ConcurrentHashMap(16));\n   private final Map<Object, Object> earlyProxyReferences = new ConcurrentHashMap(16);\n   private final Map<Object, Class<?>> proxyTypes = new ConcurrentHashMap(16);\n   private final Map<Object, Boolean> advisedBeans = new ConcurrentHashMap(256);\n\n   public void setFrozen(boolean frozen) {\n      this.freezeProxy = frozen;\n   }\n\n   public boolean isFrozen() {\n      return this.freezeProxy;\n   }\n\n   public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {\n      this.advisorAdapterRegistry = advisorAdapterRegistry;\n   }\n\n   public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators) {\n      this.customTargetSourceCreators = targetSourceCreators;\n   }\n\n   public void setInterceptorNames(String... interceptorNames) {\n      this.interceptorNames = interceptorNames;\n   }\n\n   public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {\n      this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst;\n   }\n\n   public void setBeanFactory(BeanFactory beanFactory) {\n      this.beanFactory = beanFactory;\n   }\n\n   @Nullable\n   protected BeanFactory getBeanFactory() {\n      return this.beanFactory;\n   }\n\n   @Nullable\n   public Class<?> predictBeanType(Class<?> beanClass, String beanName) {\n      if (this.proxyTypes.isEmpty()) {\n         return null;\n      } else {\n         Object cacheKey = this.getCacheKey(beanClass, beanName);\n         return (Class)this.proxyTypes.get(cacheKey);\n      }\n   }\n\n   @Nullable\n   public Constructor<?>[] determineCandidateConstructors(Class<?> beanClass, String beanName) {\n      return null;\n   }\n\n   public Object getEarlyBeanReference(Object bean, String beanName) {\n      Object cacheKey = this.getCacheKey(bean.getClass(), beanName);\n      this.earlyProxyReferences.put(cacheKey, bean);\n      return this.wrapIfNecessary(bean, beanName, cacheKey);\n   }\n\n   public Object postProcessBeforeInstantiation(Class<?> beanClass, String beanName) {\n      Object cacheKey = this.getCacheKey(beanClass, beanName);\n      if (!StringUtils.hasLength(beanName) || !this.targetSourcedBeans.contains(beanName)) {\n         if (this.advisedBeans.containsKey(cacheKey)) {\n            return null;\n         }\n\n         if (this.isInfrastructureClass(beanClass) || this.shouldSkip(beanClass, beanName)) {\n            this.advisedBeans.put(cacheKey, Boolean.FALSE);\n            return null;\n         }\n      }\n\n      TargetSource targetSource = this.getCustomTargetSource(beanClass, beanName);\n      if (targetSource != null) {\n         if (StringUtils.hasLength(beanName)) {\n            this.targetSourcedBeans.add(beanName);\n         }\n\n         Object[] specificInterceptors = this.getAdvicesAndAdvisorsForBean(beanClass, beanName, targetSource);\n         Object proxy = this.createProxy(beanClass, beanName, specificInterceptors, targetSource);\n         this.proxyTypes.put(cacheKey, proxy.getClass());\n         return proxy;\n      } else {\n         return null;\n      }\n   }\n\n   public PropertyValues postProcessProperties(PropertyValues pvs, Object bean, String beanName) {\n      return pvs;\n   }\n\n   public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) {\n      if (bean != null) {\n         Object cacheKey = this.getCacheKey(bean.getClass(), beanName);\n         if (this.earlyProxyReferences.remove(cacheKey) != bean) {\n            return this.wrapIfNecessary(bean, beanName, cacheKey);\n         }\n      }\n\n      return bean;\n   }\n\n   protected Object getCacheKey(Class<?> beanClass, @Nullable String beanName) {\n      if (StringUtils.hasLength(beanName)) {\n         return FactoryBean.class.isAssignableFrom(beanClass) ? \"&\" + beanName : beanName;\n      } else {\n         return beanClass;\n      }\n   }\n\n   protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {\n      if (StringUtils.hasLength(beanName) && this.targetSourcedBeans.contains(beanName)) {\n         return bean;\n      } else if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {\n         return bean;\n      } else if (!this.isInfrastructureClass(bean.getClass()) && !this.shouldSkip(bean.getClass(), beanName)) {\n         Object[] specificInterceptors = this.getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, (TargetSource)null);\n         if (specificInterceptors != DO_NOT_PROXY) {\n            this.advisedBeans.put(cacheKey, Boolean.TRUE);\n            Object proxy = this.createProxy(bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean));\n            this.proxyTypes.put(cacheKey, proxy.getClass());\n            return proxy;\n         } else {\n            this.advisedBeans.put(cacheKey, Boolean.FALSE);\n            return bean;\n         }\n      } else {\n         this.advisedBeans.put(cacheKey, Boolean.FALSE);\n         return bean;\n      }\n   }\n\n   protected boolean isInfrastructureClass(Class<?> beanClass) {\n      boolean retVal = Advice.class.isAssignableFrom(beanClass) || Pointcut.class.isAssignableFrom(beanClass) || Advisor.class.isAssignableFrom(beanClass) || AopInfrastructureBean.class.isAssignableFrom(beanClass);\n      if (retVal && this.logger.isTraceEnabled()) {\n         this.logger.trace(\"Did not attempt to auto-proxy infrastructure class [\" + beanClass.getName() + \"]\");\n      }\n\n      return retVal;\n   }\n\n   protected boolean shouldSkip(Class<?> beanClass, String beanName) {\n      return AutoProxyUtils.isOriginalInstance(beanName, beanClass);\n   }\n\n   @Nullable\n   protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {\n      if (this.customTargetSourceCreators != null && this.beanFactory != null && this.beanFactory.containsBean(beanName)) {\n         TargetSourceCreator[] var3 = this.customTargetSourceCreators;\n         int var4 = var3.length;\n\n         for(int var5 = 0; var5 < var4; ++var5) {\n            TargetSourceCreator tsc = var3[var5];\n            TargetSource ts = tsc.getTargetSource(beanClass, beanName);\n            if (ts != null) {\n               if (this.logger.isTraceEnabled()) {\n                  this.logger.trace(\"TargetSourceCreator [\" + tsc + \"] found custom TargetSource for bean with name '\" + beanName + \"'\");\n               }\n\n               return ts;\n            }\n         }\n      }\n\n      return null;\n   }\n\n   protected Object createProxy(Class<?> beanClass, @Nullable String beanName, @Nullable Object[] specificInterceptors, TargetSource targetSource) {\n      if (this.beanFactory instanceof ConfigurableListableBeanFactory) {\n         AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory)this.beanFactory, beanName, beanClass);\n      }\n\n      ProxyFactory proxyFactory = new ProxyFactory();\n      proxyFactory.copyFrom(this);\n      if (proxyFactory.isProxyTargetClass()) {\n         if (Proxy.isProxyClass(beanClass) || ClassUtils.isLambdaClass(beanClass)) {\n            Class[] var6 = beanClass.getInterfaces();\n            int var7 = var6.length;\n\n            for(int var8 = 0; var8 < var7; ++var8) {\n               Class<?> ifc = var6[var8];\n               proxyFactory.addInterface(ifc);\n            }\n         }\n      } else if (this.shouldProxyTargetClass(beanClass, beanName)) {\n         proxyFactory.setProxyTargetClass(true);\n      } else {\n         this.evaluateProxyInterfaces(beanClass, proxyFactory);\n      }\n\n      Advisor[] advisors = this.buildAdvisors(beanName, specificInterceptors);\n      proxyFactory.addAdvisors(advisors);\n      proxyFactory.setTargetSource(targetSource);\n      this.customizeProxyFactory(proxyFactory);\n      proxyFactory.setFrozen(this.freezeProxy);\n      if (this.advisorsPreFiltered()) {\n         proxyFactory.setPreFiltered(true);\n      }\n\n      ClassLoader classLoader = this.getProxyClassLoader();\n      if (classLoader instanceof SmartClassLoader && classLoader != beanClass.getClassLoader()) {\n         classLoader = ((SmartClassLoader)classLoader).getOriginalClassLoader();\n      }\n\n      return proxyFactory.getProxy(classLoader);\n   }\n\n   protected boolean shouldProxyTargetClass(Class<?> beanClass, @Nullable String beanName) {\n      return this.beanFactory instanceof ConfigurableListableBeanFactory && AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory)this.beanFactory, beanName);\n   }\n\n   protected boolean advisorsPreFiltered() {\n      return false;\n   }\n\n   protected Advisor[] buildAdvisors(@Nullable String beanName, @Nullable Object[] specificInterceptors) {\n      Advisor[] commonInterceptors = this.resolveInterceptorNames();\n      List<Object> allInterceptors = new ArrayList();\n      if (specificInterceptors != null) {\n         if (specificInterceptors.length > 0) {\n            allInterceptors.addAll(Arrays.asList(specificInterceptors));\n         }\n\n         if (commonInterceptors.length > 0) {\n            if (this.applyCommonInterceptorsFirst) {\n               allInterceptors.addAll(0, Arrays.asList(commonInterceptors));\n            } else {\n               allInterceptors.addAll(Arrays.asList(commonInterceptors));\n            }\n         }\n      }\n\n      int i;\n      if (this.logger.isTraceEnabled()) {\n         int nrOfCommonInterceptors = commonInterceptors.length;\n         i = specificInterceptors != null ? specificInterceptors.length : 0;\n         this.logger.trace(\"Creating implicit proxy for bean '\" + beanName + \"' with \" + nrOfCommonInterceptors + \" common interceptors and \" + i + \" specific interceptors\");\n      }\n\n      Advisor[] advisors = new Advisor[allInterceptors.size()];\n\n      for(i = 0; i < allInterceptors.size(); ++i) {\n         advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i));\n      }\n\n      return advisors;\n   }\n\n   private Advisor[] resolveInterceptorNames() {\n      BeanFactory bf = this.beanFactory;\n      ConfigurableBeanFactory cbf = bf instanceof ConfigurableBeanFactory ? (ConfigurableBeanFactory)bf : null;\n      List<Advisor> advisors = new ArrayList();\n      String[] var4 = this.interceptorNames;\n      int var5 = var4.length;\n\n      for(int var6 = 0; var6 < var5; ++var6) {\n         String beanName = var4[var6];\n         if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {\n            Assert.state(bf != null, \"BeanFactory required for resolving interceptor names\");\n            Object next = bf.getBean(beanName);\n            advisors.add(this.advisorAdapterRegistry.wrap(next));\n         }\n      }\n\n      return (Advisor[])advisors.toArray(new Advisor[0]);\n   }\n\n   protected void customizeProxyFactory(ProxyFactory proxyFactory) {\n   }\n\n   @Nullable\n   protected abstract Object[] getAdvicesAndAdvisorsForBean(Class<?> var1, String var2, @Nullable TargetSource var3) throws BeansException;\n}\n"}