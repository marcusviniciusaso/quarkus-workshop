{"id":"5796048","content":"package org.springdoc.webmvc.api;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport io.swagger.v3.oas.annotations.Operation;\nimport java.util.Locale;\nimport javax.servlet.http.HttpServletRequest;\nimport org.springdoc.core.AbstractRequestService;\nimport org.springdoc.core.GenericResponseService;\nimport org.springdoc.core.OpenAPIService;\nimport org.springdoc.core.OperationService;\nimport org.springdoc.core.SpringDocConfigProperties;\nimport org.springdoc.core.SpringDocProviders;\nimport org.springdoc.core.customizers.SpringDocCustomizers;\nimport org.springframework.beans.factory.ObjectFactory;\nimport org.springframework.boot.actuate.endpoint.web.annotation.RestControllerEndpoint;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n@RestControllerEndpoint(\n   id = \"openapi\"\n)\n@ConditionalOnProperty(\n   name = {\"springdoc.enable-default-api-docs\"},\n   havingValue = \"true\",\n   matchIfMissing = true\n)\npublic class OpenApiActuatorResource extends OpenApiResource {\n   public OpenApiActuatorResource(ObjectFactory<OpenAPIService> openAPIBuilderObjectFactory, AbstractRequestService requestBuilder, GenericResponseService responseBuilder, OperationService operationParser, SpringDocConfigProperties springDocConfigProperties, SpringDocProviders springDocProviders, SpringDocCustomizers springDocCustomizers) {\n      super(openAPIBuilderObjectFactory, requestBuilder, responseBuilder, operationParser, springDocConfigProperties, springDocProviders, springDocCustomizers);\n   }\n\n   public OpenApiActuatorResource(String groupName, ObjectFactory<OpenAPIService> openAPIBuilderObjectFactory, AbstractRequestService requestBuilder, GenericResponseService responseBuilder, OperationService operationParser, SpringDocConfigProperties springDocConfigProperties, SpringDocProviders springDocProviders, SpringDocCustomizers springDocCustomizers) {\n      super(groupName, openAPIBuilderObjectFactory, requestBuilder, responseBuilder, operationParser, springDocConfigProperties, springDocProviders, springDocCustomizers);\n   }\n\n   @Operation(\n      hidden = true\n   )\n   @GetMapping(\n      value = {\"/\"},\n      produces = {\"application/json\"}\n   )\n   public byte[] openapiJson(HttpServletRequest request, Locale locale) throws JsonProcessingException {\n      return this.openapiJson(request, \"\", locale);\n   }\n\n   @Operation(\n      hidden = true\n   )\n   @GetMapping(\n      value = {\"/yaml\"},\n      produces = {\"application/vnd.oai.openapi\"}\n   )\n   public byte[] openapiYaml(HttpServletRequest request, Locale locale) throws JsonProcessingException {\n      return super.openapiYaml(request, \"yaml\", locale);\n   }\n\n   protected String getServerUrl(HttpServletRequest request, String apiDocsUrl) {\n      return this.getActuatorURI(request.getScheme(), request.getServerName()).toString();\n   }\n}\n"}