{"id":"2113592","content":"package io.swagger.v3.core.jackson;\n\nimport com.fasterxml.jackson.databind.introspect.Annotated;\nimport io.swagger.v3.core.util.AnnotationsUtils;\nimport io.swagger.v3.oas.models.media.ArraySchema;\nimport io.swagger.v3.oas.models.media.MapSchema;\nimport io.swagger.v3.oas.models.media.ObjectSchema;\nimport io.swagger.v3.oas.models.media.Schema;\nimport io.swagger.v3.oas.models.media.XML;\nimport java.lang.annotation.Annotation;\nimport javax.xml.bind.annotation.XmlAttribute;\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlElementWrapper;\nimport org.apache.commons.lang3.StringUtils;\n\nclass JAXBAnnotationsHelper {\n   public static final String JAXB_DEFAULT = \"##default\";\n\n   public static void apply(Annotated member, Annotation[] annotations, Schema property) {\n      XmlElementWrapper wrapper = (XmlElementWrapper)member.getAnnotation(XmlElementWrapper.class);\n      if (wrapper == null) {\n         wrapper = (XmlElementWrapper)AnnotationsUtils.getAnnotation(XmlElementWrapper.class, annotations);\n      }\n\n      XmlAttribute attr = (XmlAttribute)member.getAnnotation(XmlAttribute.class);\n      if (attr == null) {\n         attr = (XmlAttribute)AnnotationsUtils.getAnnotation(XmlAttribute.class, annotations);\n      }\n\n      XmlElement elem = (XmlElement)member.getAnnotation(XmlElement.class);\n      if (elem == null) {\n         elem = (XmlElement)AnnotationsUtils.getAnnotation(XmlElement.class, annotations);\n      }\n\n      if (wrapper != null) {\n         applyElement(wrapper, property);\n      } else if (elem != null) {\n         applyElement(elem, property);\n      } else if (attr != null && isAttributeAllowed(property)) {\n         applyAttribute(attr, property);\n      }\n\n   }\n\n   private static void applyElement(XmlElementWrapper wrapper, Schema property) {\n      if (wrapper != null) {\n         XML xml = getXml(property);\n         xml.setWrapped(true);\n         if (!\"##default\".equals(wrapper.name()) && !wrapper.name().isEmpty() && !wrapper.name().equals(property.getName())) {\n            xml.setName(wrapper.name());\n         }\n      }\n\n   }\n\n   private static void applyElement(XmlElement element, Schema property) {\n      if (element != null) {\n         setName(element.namespace(), element.name(), property);\n      }\n\n   }\n\n   private static void applyAttribute(XmlAttribute attribute, Schema property) {\n      if (attribute != null) {\n         XML xml = getXml(property);\n         xml.setAttribute(true);\n         setName(attribute.namespace(), attribute.name(), property);\n      }\n\n   }\n\n   private static XML getXml(Schema property) {\n      XML existing = property.getXml();\n      if (existing != null) {\n         return existing;\n      } else {\n         XML created = new XML();\n         property.setXml(created);\n         return created;\n      }\n   }\n\n   private static boolean setName(String ns, String name, Schema property) {\n      boolean apply = false;\n      String cleanName = StringUtils.trimToNull(name);\n      String useName;\n      if (!isEmpty(cleanName) && !cleanName.equals(property.getName())) {\n         useName = cleanName;\n         apply = true;\n      } else {\n         useName = null;\n      }\n\n      String cleanNS = StringUtils.trimToNull(ns);\n      String useNS;\n      if (!isEmpty(cleanNS)) {\n         useNS = cleanNS;\n         apply = true;\n      } else {\n         useNS = null;\n      }\n\n      if (apply) {\n         getXml(property).name(useName).namespace(useNS);\n      }\n\n      return apply;\n   }\n\n   private static boolean isAttributeAllowed(Schema property) {\n      Class[] var1 = new Class[]{ArraySchema.class, MapSchema.class, ObjectSchema.class};\n      int var2 = var1.length;\n\n      for(int var3 = 0; var3 < var2; ++var3) {\n         Class<?> item = var1[var3];\n         if (item.isInstance(property)) {\n            return false;\n         }\n      }\n\n      return StringUtils.isBlank(property.get$ref());\n   }\n\n   private static boolean isEmpty(String name) {\n      return StringUtils.isEmpty(name) || \"##default\".equals(name);\n   }\n}\n"}