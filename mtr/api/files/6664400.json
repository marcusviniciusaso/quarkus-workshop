{"id":"6664400","content":"package ch.qos.logback.classic.net.server;\n\nimport ch.qos.logback.classic.net.ReceiverBase;\nimport ch.qos.logback.core.net.server.ServerListener;\nimport ch.qos.logback.core.net.server.ServerRunner;\nimport ch.qos.logback.core.util.CloseUtil;\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.UnknownHostException;\nimport java.util.concurrent.Executor;\nimport javax.net.ServerSocketFactory;\n\npublic class ServerSocketReceiver extends ReceiverBase {\n   public static final int DEFAULT_BACKLOG = 50;\n   private int port = 4560;\n   private int backlog = 50;\n   private String address;\n   private ServerSocket serverSocket;\n   private ServerRunner runner;\n\n   protected boolean shouldStart() {\n      try {\n         ServerSocket serverSocket = this.getServerSocketFactory().createServerSocket(this.getPort(), this.getBacklog(), this.getInetAddress());\n         ServerListener<RemoteAppenderClient> listener = this.createServerListener(serverSocket);\n         this.runner = this.createServerRunner(listener, this.getContext().getExecutorService());\n         this.runner.setContext(this.getContext());\n         return true;\n      } catch (Exception var3) {\n         this.addError(\"server startup error: \" + var3, var3);\n         CloseUtil.closeQuietly(this.serverSocket);\n         return false;\n      }\n   }\n\n   protected ServerListener<RemoteAppenderClient> createServerListener(ServerSocket socket) {\n      return new RemoteAppenderServerListener(socket);\n   }\n\n   protected ServerRunner createServerRunner(ServerListener<RemoteAppenderClient> listener, Executor executor) {\n      return new RemoteAppenderServerRunner(listener, executor);\n   }\n\n   protected Runnable getRunnableTask() {\n      return this.runner;\n   }\n\n   protected void onStop() {\n      try {\n         if (this.runner == null) {\n            return;\n         }\n\n         this.runner.stop();\n      } catch (IOException var2) {\n         this.addError(\"server shutdown error: \" + var2, var2);\n      }\n\n   }\n\n   protected ServerSocketFactory getServerSocketFactory() throws Exception {\n      return ServerSocketFactory.getDefault();\n   }\n\n   protected InetAddress getInetAddress() throws UnknownHostException {\n      return this.getAddress() == null ? null : InetAddress.getByName(this.getAddress());\n   }\n\n   public int getPort() {\n      return this.port;\n   }\n\n   public void setPort(int port) {\n      this.port = port;\n   }\n\n   public int getBacklog() {\n      return this.backlog;\n   }\n\n   public void setBacklog(int backlog) {\n      this.backlog = backlog;\n   }\n\n   public String getAddress() {\n      return this.address;\n   }\n\n   public void setAddress(String address) {\n      this.address = address;\n   }\n}\n"}