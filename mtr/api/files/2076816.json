{"id":"2076816","content":"package io.swagger.v3.core.jackson;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.core.Version;\nimport com.fasterxml.jackson.databind.AnnotationIntrospector;\nimport com.fasterxml.jackson.databind.introspect.Annotated;\nimport com.fasterxml.jackson.databind.introspect.AnnotatedClass;\nimport com.fasterxml.jackson.databind.introspect.AnnotatedMember;\nimport com.fasterxml.jackson.databind.jsontype.NamedType;\nimport io.swagger.v3.core.util.AnnotationsUtils;\nimport io.swagger.v3.oas.annotations.media.ArraySchema;\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport javax.xml.bind.annotation.XmlElement;\n\npublic class SwaggerAnnotationIntrospector extends AnnotationIntrospector {\n   private static final long serialVersionUID = 1L;\n\n   public Version version() {\n      return PackageVersion.VERSION;\n   }\n\n   public Boolean hasRequiredMarker(AnnotatedMember m) {\n      XmlElement elem = (XmlElement)m.getAnnotation(XmlElement.class);\n      if (elem != null && elem.required()) {\n         return true;\n      } else {\n         JsonProperty jsonProperty = (JsonProperty)m.getAnnotation(JsonProperty.class);\n         if (jsonProperty != null && jsonProperty.required()) {\n            return true;\n         } else {\n            Schema ann = (Schema)m.getAnnotation(Schema.class);\n            if (ann != null && ann.required()) {\n               return ann.required();\n            } else {\n               ArraySchema arraySchema = (ArraySchema)m.getAnnotation(ArraySchema.class);\n               if (arraySchema != null) {\n                  if (arraySchema.arraySchema().required()) {\n                     return arraySchema.arraySchema().required();\n                  }\n\n                  if (arraySchema.schema().required()) {\n                     return arraySchema.schema().required();\n                  }\n               }\n\n               return null;\n            }\n         }\n      }\n   }\n\n   public String findPropertyDescription(Annotated a) {\n      Schema model = (Schema)a.getAnnotation(Schema.class);\n      return model != null && !\"\".equals(model.description()) ? model.description() : null;\n   }\n\n   public List<NamedType> findSubtypes(Annotated a) {\n      Schema schema = (Schema)a.getAnnotation(Schema.class);\n      if (schema == null) {\n         ArraySchema arraySchema = (ArraySchema)a.getAnnotation(ArraySchema.class);\n         if (arraySchema != null) {\n            schema = arraySchema.schema();\n         }\n      }\n\n      if (AnnotationsUtils.hasSchemaAnnotation(schema)) {\n         Class<?>[] classes = schema.subTypes();\n         List<NamedType> names = new ArrayList(classes.length);\n         Class[] var5 = classes;\n         int var6 = classes.length;\n\n         for(int var7 = 0; var7 < var6; ++var7) {\n            Class<?> subType = var5[var7];\n            names.add(new NamedType(subType));\n         }\n\n         if (!names.isEmpty()) {\n            return names;\n         }\n      }\n\n      return Collections.emptyList();\n   }\n\n   public String findTypeName(AnnotatedClass ac) {\n      Schema mp = AnnotationsUtils.getSchemaAnnotation(ac);\n      return mp != null && !mp.name().isEmpty() ? mp.name() : null;\n   }\n}\n"}