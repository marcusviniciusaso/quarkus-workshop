{"id":"1671312","content":"package ch.qos.logback.classic.joran.action;\n\nimport ch.qos.logback.classic.LoggerContext;\nimport ch.qos.logback.classic.joran.ReconfigureOnChangeTask;\nimport ch.qos.logback.classic.util.EnvUtil;\nimport ch.qos.logback.core.joran.action.Action;\nimport ch.qos.logback.core.joran.spi.InterpretationContext;\nimport ch.qos.logback.core.joran.util.ConfigurationWatchListUtil;\nimport ch.qos.logback.core.status.OnConsoleStatusListener;\nimport ch.qos.logback.core.util.ContextUtil;\nimport ch.qos.logback.core.util.Duration;\nimport ch.qos.logback.core.util.OptionHelper;\nimport ch.qos.logback.core.util.StatusListenerConfigHelper;\nimport java.net.URL;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.ScheduledFuture;\nimport java.util.concurrent.TimeUnit;\nimport org.xml.sax.Attributes;\n\npublic class ConfigurationAction extends Action {\n   static final String INTERNAL_DEBUG_ATTR = \"debug\";\n   static final String PACKAGING_DATA_ATTR = \"packagingData\";\n   static final String SCAN_ATTR = \"scan\";\n   static final String SCAN_PERIOD_ATTR = \"scanPeriod\";\n   static final String DEBUG_SYSTEM_PROPERTY_KEY = \"logback.debug\";\n   long threshold = 0L;\n\n   public void begin(InterpretationContext ic, String name, Attributes attributes) {\n      this.threshold = System.currentTimeMillis();\n      String debugAttrib = this.getSystemProperty(\"logback.debug\");\n      if (debugAttrib == null) {\n         debugAttrib = ic.subst(attributes.getValue(\"debug\"));\n      }\n\n      if (!OptionHelper.isEmpty(debugAttrib) && !debugAttrib.equalsIgnoreCase(\"false\") && !debugAttrib.equalsIgnoreCase(\"null\")) {\n         StatusListenerConfigHelper.addOnConsoleListenerInstance(this.context, new OnConsoleStatusListener());\n      } else {\n         this.addInfo(\"debug attribute not set\");\n      }\n\n      this.processScanAttrib(ic, attributes);\n      LoggerContext lc = (LoggerContext)this.context;\n      boolean packagingData = OptionHelper.toBoolean(ic.subst(attributes.getValue(\"packagingData\")), false);\n      lc.setPackagingDataEnabled(packagingData);\n      if (EnvUtil.isGroovyAvailable()) {\n         ContextUtil contextUtil = new ContextUtil(this.context);\n         contextUtil.addGroovyPackages(lc.getFrameworkPackages());\n      }\n\n      ic.pushObject(this.getContext());\n   }\n\n   String getSystemProperty(String name) {\n      try {\n         return System.getProperty(name);\n      } catch (SecurityException var3) {\n         return null;\n      }\n   }\n\n   void processScanAttrib(InterpretationContext ic, Attributes attributes) {\n      String scanAttrib = ic.subst(attributes.getValue(\"scan\"));\n      if (!OptionHelper.isEmpty(scanAttrib) && !\"false\".equalsIgnoreCase(scanAttrib)) {\n         ScheduledExecutorService scheduledExecutorService = this.context.getScheduledExecutorService();\n         URL mainURL = ConfigurationWatchListUtil.getMainWatchURL(this.context);\n         if (mainURL == null) {\n            this.addWarn(\"Due to missing top level configuration file, reconfiguration on change (configuration file scanning) cannot be done.\");\n            return;\n         }\n\n         ReconfigureOnChangeTask rocTask = new ReconfigureOnChangeTask();\n         rocTask.setContext(this.context);\n         this.context.putObject(\"RECONFIGURE_ON_CHANGE_TASK\", rocTask);\n         String scanPeriodAttrib = ic.subst(attributes.getValue(\"scanPeriod\"));\n         Duration duration = this.getDuration(scanAttrib, scanPeriodAttrib);\n         if (duration == null) {\n            return;\n         }\n\n         this.addInfo(\"Will scan for changes in [\" + mainURL + \"] \");\n         this.addInfo(\"Setting ReconfigureOnChangeTask scanning period to \" + duration);\n         ScheduledFuture<?> scheduledFuture = scheduledExecutorService.scheduleAtFixedRate(rocTask, duration.getMilliseconds(), duration.getMilliseconds(), TimeUnit.MILLISECONDS);\n         this.context.addScheduledFuture(scheduledFuture);\n      }\n\n   }\n\n   private Duration getDuration(String scanAttrib, String scanPeriodAttrib) {\n      Duration duration = null;\n      if (!OptionHelper.isEmpty(scanPeriodAttrib)) {\n         try {\n            duration = Duration.valueOf(scanPeriodAttrib);\n         } catch (NumberFormatException var5) {\n            this.addError(\"Error while converting [\" + scanAttrib + \"] to long\", var5);\n         }\n      }\n\n      return duration;\n   }\n\n   public void end(InterpretationContext ec, String name) {\n      this.addInfo(\"End of configuration.\");\n      ec.popObject();\n   }\n}\n"}